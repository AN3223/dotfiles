#!/usr/bin/awk -f

BEGIN {
	len = split(ENVIRON["LUMA"] ENVIRON["CHROMA"], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if (var_val[1] == "T_FRAME_LIMIT")
			T_FRAME_LIMIT = var_val[2]
		else if (var_val[1] == "T_RES")
			T_RES = var_val[2]
		else if (opts[i] == "CHROMA_DISABLE")
			CHROMA_DISABLE = 1
		else if (opts[i] == "LUMA_DISABLE")
			LUMA_DISABLE = 1
	}
}

/^\/\/!HOOK LUMA$/   && LUMA_DISABLE   { next }
/^\/\/!HOOK CHROMA$/ && CHROMA_DISABLE { next }

/^\/\/!SAVE/ { texture = $2 }

/^\/\/!WIDTH/ || /^\/\/!HEIGHT/ {
	len = split(ENVIRON["CHROMA"], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if (var_val[2] > 0 && var_val[1] == texture) {
			printf("%s %s %s %s\n", $1, $2, var_val[2], $4)
			next
		}
	}

	len = split(ENVIRON["LUMA"], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if (var_val[2] > 0 && var_val[1] "_LUMA" == texture) {
			printf("%s %s %s %s\n", $1, $2, var_val[2], $4)
			next
		}
	}
}

/^#ifdef LUMA_raw$/       { plane = "LUMA" }
/^#el/ && plane == "LUMA" { plane = "CHROMA" }

/^#define/ {
	len = split(ENVIRON[plane], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if ($2 == var_val[1]) {
			if ($2 == "EP" || $2 == "RF")
				printf("#define %s %s\n", var_val[1], (var_val[2] > 0))
			else
				printf("#define %s %s\n", var_val[1], var_val[2])
			next
		}
	}
}

/\/\/cfg_desc/ { printf("// Profile description: %s\n", ENVIRON["DESC"]); next; }

T_FRAME_LIMIT > 0 && /^\/\/!DESC Non-local means$/ {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("//!BIND PREV%d\n", i)
}

T_FRAME_LIMIT > 0 && /\/\/cfg_T_load/ {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("\tcase %d: return imageLoad(PREV%d, ivec2((HOOKED_pos + HOOKED_pt * vec2(off)) * imageSize(PREV%d)));\n", i, i, i)
	next
}

T_FRAME_LIMIT > 0 && /\/\/cfg_T_store/ {
	for (i = T_FRAME_LIMIT; i > 0; i--)
		printf("\timageStore(PREV%d, ivec2(HOOKED_pos*imageSize(PREV%d)), load2(vec3(0,0,%d)));\n", i, i, i-1)
	next
}

{ print $0 }

END {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("//!TEXTURE PREV%d\n//!SIZE %d %d\n//!FORMAT r32f\n//!STORAGE\n\n", i, T_RES, T_RES)
}

