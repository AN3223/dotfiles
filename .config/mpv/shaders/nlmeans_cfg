#!/usr/bin/awk -f
# This script modifies/generates preprocessor/GLSL code for nlmeans. Usage 
# examples can be found in Makefile.nlm

BEGIN {
	HOOKS = "LUMA:CHROMA:RGB"

	len = split(ENVIRON["CFG"], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if (var_val[1] == "HOOKS")
			HOOKS = var_val[2]
		else if (var_val[1] == "T_FRAME_LIMIT")
			T_FRAME_LIMIT = var_val[2]
		else if (var_val[1] == "T_RES_W")
			T_RES_W = var_val[2]
		else if (var_val[1] == "T_RES_H")
			T_RES_H = var_val[2]
	}
}

/\/\/cfg_desc/ { printf("// Profile description: %s\n", ENVIRON["DESC"]); next; }

# Prints //!HOOK for each HOOKED plane and //!BIND HOOKED
function hooks() {
	split(HOOKS, hooks_arr, ":")
	for (i in hooks_arr)
		printf("//!HOOK %s\n", hooks_arr[i])
	printf("%s\n", "//!BIND HOOKED")
}

function downscale(name, scale) {
	hooks()
	printf("%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n",
		"//!DESC Non-local means (downscale)",
		"//!SAVE " name,
		"//!WIDTH HOOKED.w " scale " /",
		"//!HEIGHT HOOKED.h " scale " /",
		"vec4 hook()",
		"{",
		"	return HOOKED_texOff(0);",
		"}")
	TEXTURES = TEXTURES ? (TEXTURES ":" name) : name
}

# Shader stages preceding NLM
/\/\/cfg_pre/ {
	split("CHROMA LUMA", planes)
	for (p in planes) {
		# sets defaults for RF/EP, should be the same as nlmeans_template
		RF = (planes[p] == "LUMA") ? 0 : 2.0
		EP = (planes[p] == "LUMA") ? 3.0 : 0

		len = split(ENVIRON[planes[p]], opts, ":")
		for (i = 1; i <= len; i++) {
			split(opts[i], var_val, "=")
			if (var_val[1] == "RF")
				RF = var_val[2]
			else if (var_val[1] == "EP")
				EP = var_val[2]
		}

		tex_suffix = (planes[p] == "LUMA") ? "_LUMA" : ""
		if (RF)
			downscale("RF" tex_suffix, RF)
		if (EP)
			downscale("EP" tex_suffix, EP)
	}
	next
}

# NLM HOOK block
/\/\/cfg_hook/ {
	hooks()

	split(TEXTURES, tex_arr, ":")
	for (i in tex_arr)
		printf("//!BIND %s\n", tex_arr[i])

	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("//!BIND PREV%d\n", i)

	printf("//!DESC Non-local means (%s)\n", ENVIRON["FILENAME"])

	next
}

/^#ifdef LUMA_raw$/       { plane = "LUMA" }
/^#el/ && plane == "LUMA" { plane = "CHROMA" }

/^#define/ {
	len = split(ENVIRON[plane], opts, ":")
	for (i = 1; i <= len; i++) {
		split(opts[i], var_val, "=")
		if ($2 == var_val[1]) {
			if ($2 == "EP" || $2 == "RF")
				printf("#define %s %s\n", var_val[1], (var_val[2] > 0))
			else
				printf("#define %s %s\n", var_val[1], var_val[2])
			next
		}
	}
}

/\/\/cfg_T_load/ {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("\tcase %d: return imageLoad(PREV%d, ivec2((HOOKED_pos + HOOKED_pt * vec2(off)) * imageSize(PREV%d)));\n", i, i, i)
	next
}

/\/\/cfg_T_store/ {
	for (i = T_FRAME_LIMIT; i > 0; i--)
		printf("\timageStore(PREV%d, ivec2(HOOKED_pos*imageSize(PREV%d)), load2(vec3(0,0,%d)));\n", i, i, i-1)
	next
}

{ print $0 }

END {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("//!TEXTURE PREV%d\n//!SIZE %d %d\n//!FORMAT r32f\n//!STORAGE\n\n", i, T_RES_W, T_RES_H)
}

