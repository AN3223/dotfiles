#!/usr/bin/env raku

# XXX call this script from a Makefile and maintain a text file of SSIMs for each shader
# XXX implement minimization
# XXX implement downscaling
# XXX implement async
# XXX support non-yuv420p?

use MONKEY-SEE-NO-EVAL;
use soft;

my %tmp;
END %tmp.values.flat.map(&unlink);

my $ffmpeg = "ffmpeg -nostdin -y";
my $x265 = "-c:v libx265 -x265-params lossless=1 -pix_fmt yuv420p";

# prints stdout & stderr on error, drops stdout & stderr if they aren't requested
&run.wrap(sub (*@args, *%opts) {
	my %opts_ = %opts;
	%opts_<out err> = %opts<out> || True, %opts<err> || True;

	@args.note if $*verbose;

	if $*dry-run {
		@args.note if not $*verbose;
		callwith <true>, :out, :err;
	} elsif my $proc = callwith(|@args, |%opts_) {
		$proc.out.slurp(:close) if not %opts<out>;
		$proc.err.slurp(:close) if not %opts<err>;
		$proc;
	} else {
		note($proc.out.slurp(:close)) if $proc.out;
		note($proc.err.slurp(:close)) if $proc.err;
		die 'command failed: ' ~ @args;
	}
});

sub parse_ssim(Str $out) returns List {
	$out.split("\n", :skip-empty).map({
		.split(' ')[1..*-2].map({.split(':')}).flat.hash
	}).list
}

# takes a list of parse_ssim outputs and returns a single hash of averages
sub avg_ssim(@ssims) returns Hash {
	@ssims.map({.reduce(-> $frame_acc, $frame {
		$frame_acc.map({.key => .value + $frame{.key}})
	}).map({.key => .value / @ssims[0].elems})})
	.reduce(-> $realization_acc, $realization {
		$realization_acc.map({.key => .value + $realization{.key}})
	}).map({.key => .value / @ssims.elems}).hash
}

sub run_cfg(Str $cfgopts) {
	my $in-shader = open :r, $*shader;
	my $out-shader = open :w, %tmp<shader>;
	given $*shader {
		when /nlmeans/ {
			run <./nlmeans_cfg>, :in($in-shader), :out($out-shader),
				:env("NLM_$*plane" => $cfgopts, "NLM_OPTS" => "HOOKS=$*plane");
		}
		when /guided/ {
			run <./guided_cfg>, :in($in-shader), :out($out-shader),
				:env("GUIDED_OPTS" => "$cfgopts\:HOOKS=$*plane");
		}
	}
	$out-shader.close;
	$in-shader.close;
}

sub shader_ssim(Str $in1, Str $in2) {
	my $vf = "hwupload,libplacebo=custom_shader_path=%tmp<shader>,hwdownload,format=yuv420p[placebo];";
	my $null = '-f null -';
	my $proc = run <<$ffmpeg -i "$in1" -i "$in2" -init_hw_device "$*vk-device" -lavfi "$vf [placebo]ssim=-" $null>>, :out;
	parse_ssim($proc.out.slurp(:close));
}

sub stats($cfgopts, %ssim, *%opts) {
	my $s = "$cfgopts Y %ssim<Y> U %ssim<U> V %ssim<V> All %ssim<All>\n";
	printf("$s");
	spurt $*statsfile, $s, |%opts;
}

sub concat_realizations() {
	my $new-corrupt = "$*tmpfile.corrupt.mkv";
	my $vf = "concat={%tmp<corrupt>.elems},setpts=N/(FRAME_RATE*TB)";

	note('Concatenating corrupt test media files...');
	run <<$ffmpeg -i {%tmp<corrupt>.join(' -i ')} -lavfi "$vf" $x265 "$new-corrupt">>;
	%tmp<corrupt>.map(&unlink);
	%tmp<corrupt> := ($new-corrupt);
}

sub MAIN(
	Str $test-media,
	Str :$cfgopts = "",
	Str :$*shader = "nlmeans_template",
	Str :$*plane = "LUMA",
	Int :$realizations = 50,
	Str :$corruption = "NOISE=3",
	Str :$*tmpfile = "shader_test.tmp",
	Str :$*vk-device = "vulkan",
	Str :$stats-dir = "stats",
	Bool :$*dry-run = False,
	Bool :$*verbose = False,
	Bool :$no-concat = False,
	Bool :$force = False
) {
	my $*statsfile = "$stats-dir/" ~
		"$*shader:{$test-media.IO.basename}:$*plane:$corruption\:RZ=$realizations:$cfgopts.stats"
		.subst(/\//, :g);

	if $*statsfile.IO.e and not $force {
		die "$*statsfile exists; either move/remove the file or use --force to overwrite";
	}

	if not $*dry-run {
		run <<renice -n 19 "$*PID">>; run <<ionice -c 3 -p "$*PID">>;
	}

	note('Encoding test media...');
	%tmp<media> = "$*tmpfile.mkv";
	run <<$ffmpeg -i "$test-media" $x265 "%tmp<media>">>;

	# XXX add a downscale corruption for testing upscalers
	note('Corrupting test media...');
	given $corruption {
		when /^NOISE\=/ {
			my $noise = $corruption.split('=')[1];
			%tmp<corrupt> := (^$realizations).map({"$*tmpfile.corrupt$_.mkv"});
			for ^$realizations {
				my $vf = "noise=alls=$noise\:all_seed=$_\:allf=t";
				run <<$ffmpeg -i "%tmp<media>" $x265 -vf "$vf" "%tmp<corrupt>[$_]">>;
			}
			concat_realizations() if not $no-concat;
		}
		when /^JPEG\=/ {
			my $quality = $corruption.split('=')[1];
			my $codec = "-q\:v $quality -c\:v mjpeg";
			%tmp<corrupt> = ("$*tmpfile.corrupt.mkv");
			run <<$ffmpeg -i "%tmp<media>" $codec "%tmp<corrupt>[0]">>;
		}
	}

	note('Measuring baseline...');
	my %baseline;
	if not $*dry-run {
		my $vf-ssim = "-lavfi ssim=- -f null -";
		my @baseline = %tmp<corrupt>
			.map({run <<$ffmpeg -i "%tmp<media>" -i "$_" $vf-ssim>>, :out})
			.map({parse_ssim(.out.slurp(:close))});
		%baseline = avg_ssim(@baseline.flat);
		stats "BASELINE=$corruption", %baseline;
	}

	# XXX doesn't work when only 1 parameter is specified
	# parse k=v:k=v:k=v:...
	my @cfgopts = $cfgopts.split(':', :skip-empty).map({.split('=')}).flat;
	# for restoring order after hashing; dies on duplicate keys
	my %keyorder = @cfgopts[0,2...*].unique(:with({$^x === $^y && die 'duplicate opt'})).antipairs;
	# EVAL every v in k=v:k=v:k=v:...
	my %cfgopts = @cfgopts.hash.kv.map({$^k => EVAL $^v});
	# convert to list of permutations
	@cfgopts = %cfgopts.values.reduce(&infix:<X>).map({%cfgopts.keys Z .flat});
	# convert to list of strings back to k=v:k=v:k=v:... format
	@cfgopts = @cfgopts.map({
		.sort({%keyorder{$_}}).map({.join('=')}).join(':')
	});
	# ensure non-empty
	@cfgopts = ("") if not @cfgopts;

	sprintf("Trying %d permutations...", (@cfgopts.elems || 1)).note;
	@cfgopts.note if $*verbose;

	exit if $*dry-run;

	%tmp<shader> = "$*tmpfile.glsl";
	for @cfgopts -> $cfgopts {
		run_cfg($cfgopts);
		stats $cfgopts, avg_ssim(%tmp<corrupt>.map({shader_ssim($_, %tmp<media>)})), :append;
	}
}

