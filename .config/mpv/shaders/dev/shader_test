#!/usr/bin/env raku

# XXX call this script from a Makefile and maintain a text file of SSIMs for each shader
# XXX implement minimization
# XXX implement downscaling
# XXX support testing on non-yuv420p?
# XXX add option to test multiple planes at a time? (sounds like a pain)

use MONKEY-SEE-NO-EVAL;
use soft;

my %gbl;
my %tmp;

my $ffmpeg = "ffmpeg -nostdin -y";
my $x265 = "-c:v libx265 -x265-params lossless=1 -pix_fmt yuv420p";

&run.wrap(sub (*@args, *%opts) returns Proc {
	my %opts_ = %opts;

	# drop stderr and/or stdout if they aren't requested
	%opts_<out err> = %opts<out> || '/dev/null', %opts<err> || '/dev/null';

	@args.note if %gbl<verbose>;

	if %gbl<dry-run> {
		@args.note if not %gbl<verbose>;
		callwith <true>, :out('/dev/null'), :err('/dev/null');
	} elsif my $proc = callwith(|@args, |%opts_) {
		$proc;
	} else {
		# print stdout & stderr on error
		note($proc.out.slurp(:close)) when $proc.out;
		note($proc.err.slurp(:close)) when $proc.err;
		die 'command failed: ' ~ @args;
	}
});

# takes a list of hashes outputs an average of their keys
sub hashavg(@hashes) returns Hash() {
	@hashes.reduce({$^acc >>+<< $^x}).map({$_ >>/>> @hashes.elems});
}

sub avgssim(Str $out) returns Hash {
	hashavg($out.split("\n", :skip-empty).map({
		.split(' ')[1..*-2].map({.split(':')}).flat.hash
	}))
}

sub run_cfg(Str $cfgopts) returns Str {
	my $in-shader = open %gbl<shader>;
	my $out-shader;
	loop { # ensure a unique filename
		try { $out-shader = open(sprintf("%s.%d.glsl", %gbl<tmp>, 999.rand.Int), :rx); }
		last if not $!;
	}
	LEAVE { $out-shader.close; $in-shader.close; }

	# XXX output doesn't exist sometimes?
	given %gbl<shader> {
		when /nlmeans/ {
			run <./nlmeans_cfg>, :in($in-shader), :out($out-shader),
				:env("NLM_{%gbl<plane> eq 'LUMA' ?? 'LUMA' !! 'CHROMA'}" => $cfgopts,
					"NLM_OPTS" => "HOOKS=%gbl<plane>");
		}
		when /guided/ {
			run <./guided_cfg>, :in($in-shader), :out($out-shader),
				:env("GUIDED_OPTS" => "$cfgopts\:HOOKS=%gbl<plane>");
		}
	}

	%tmp{$out-shader.IO.path} = $out-shader.IO.path;
}

sub shader_ssim(Str $in1, Str $in2, Str $shader) returns Str {
	my $vf = "hwupload,libplacebo=custom_shader_path=$shader,hwdownload,format=yuv420p[placebo];";
	my $null = '-f null -';
	my $proc = run <<$ffmpeg -i "$in1" -i "$in2" -init_hw_device "%gbl<vk>" -lavfi "$vf [placebo]ssim=-" $null>>, :out;
	$proc.out.slurp(:close);
}

sub stats($cfgopts, %ssim) {
	my $s = "$cfgopts Y %ssim<Y> U %ssim<U> V %ssim<V> All %ssim<All>\n";
	print("$s");
	%gbl<statsfile>.print($s);
	%gbl<statsfile>.flush;
}

sub concat_realizations() {
	note('Concatenating corrupt test media files...');
	my $new-corrupt = %gbl<tmp> ~ ".corrupt.mkv";
	my $vf = "concat={%tmp<corrupt>.elems},setpts=N/(FR*TB)";
	run <<$ffmpeg -i {%tmp<corrupt>.join(' -i ')} -lavfi "$vf" $x265 "$new-corrupt">>;
	%tmp<corrupt>.map(&unlink);
	%tmp<corrupt> := ($new-corrupt);
}

# XXX add short flags?
sub MAIN(
	Str $test-media,
	Str :$cfgopts = "",
	Str :$shader = "nlmeans_template",
	Str :$plane = "LUMA",
	Str :$corruption = "NOISE=5",
	Str :$tmpfile = "shader_test.tmp",
	Str :$vk-device = "vulkan",
	Str :$stats-dir = "stats",
	Int :$realizations = 10,
	Int :$jobs = 4,
	Bool :$dry-run = False,
	Bool :$verbose = False,
	Bool :$no-concat = False,
	Bool :$force = False
) {
	%gbl<tmp shader dry-run verbose vk plane> = $tmpfile, $shader, $dry-run, $verbose, $vk-device, $plane;

	my @statsfile = (
		# friendly shader name
		%gbl<shader>.IO.basename.subst(/nlmeans/, "NLM").subst(/(_template$|\.glsl$)/),
		# basename of test-media w/o extension
		$test-media.IO.basename.split('.', :skip-empty)[0],
		%gbl<plane>, $corruption, "RZ=$realizations", "CAT={(!$no-concat).Int}", $cfgopts
	);
	my $statsfile = "$stats-dir/{@statsfile.join(':').trans('/' => '_')}.stats";
	if $force {
		%gbl<statsfile> = open $statsfile, :w;
	} else {
		%gbl<statsfile> = open $statsfile, :x;
	}

	if not %gbl<dry-run> {
		run <<renice -n 19 "$*PID">>; run <<ionice -c 3 -p "$*PID">>;
	}

	note('Encoding test media...');
	%tmp<media> = "%gbl<tmp>.mkv";
	run <<$ffmpeg -i "$test-media" $x265 "%tmp<media>">>;

	# XXX add a downscale corruption for testing upscalers
	note('Corrupting test media...');
	given $corruption {
		when /^NOISE\=/ {
			my $noise = $corruption.split('=')[1];
			%tmp<corrupt> := (^$realizations).map({"%gbl<tmp>.corrupt$_.mkv"});
			for ^$realizations {
				my $vf = "noise=alls=$noise\:all_seed=$_\:allf=t";
				run <<$ffmpeg -i "%tmp<media>" $x265 -vf "$vf" "%tmp<corrupt>[$_]">>;
			}
			concat_realizations() if not $no-concat;
		}
		when /^JPEG\=/ {
			my $quality = $corruption.split('=')[1];
			my $codec = "-q\:v $quality -c\:v mjpeg";
			%tmp<corrupt> = ("%gbl<tmp>.corrupt.mkv");
			run <<$ffmpeg -i "%tmp<media>" $codec "%tmp<corrupt>[0]">>;
		}
	}

	note('Measuring baseline...');
	my %baseline;
	if not %gbl<dry-run> {
		my $baseline = %tmp<corrupt>
			.map({run(<<$ffmpeg -i "%tmp<media>" -i "$_" -lavfi ssim=- -f null ->>, :out).out.slurp(:close)})
			.join("\n");
		%baseline = avgssim($baseline);
		stats "BASELINE=$corruption", %baseline;
	}

	# XXX doesn't work when only 1 parameter is specified
	# parse k=v:k=v:k=v:...
	my @cfgopts = $cfgopts.split(':', :skip-empty).map({.split('=')}).flat;
	# for restoring order after hashing; dies on duplicate keys
	my %keyorder = @cfgopts[0,2...*].unique(:with({$^x === $^y && die 'duplicate opt'})).antipairs;
	# EVAL every v in k=v:k=v:k=v:...
	my %cfgopts = @cfgopts.hash.kv.map({$^k => EVAL $^v});
	# convert to list of permutations
	@cfgopts = %cfgopts.values.reduce(&infix:<X>).map({%cfgopts.keys Z .flat});
	# convert to list of strings back to k=v:k=v:k=v:... format
	@cfgopts = @cfgopts.map({
		.sort({%keyorder{$_}}).map({.join('=')}).join(':')
	});
	# ensure non-empty
	@cfgopts = ("") if not @cfgopts;

	sprintf("Trying %d permutations...", (@cfgopts.elems || 1)).note;
	@cfgopts.note if %gbl<verbose>;

	exit if %gbl<dry-run>;

	@cfgopts.race(:batch(1), :degree($jobs)).map(-> $cfgopts {
		my $shader = run_cfg($cfgopts);
		my $out = %tmp<corrupt>.map({shader_ssim($_, %tmp<media>, $shader)}).join("\n");
		unlink %tmp{$shader}:delete;
		$cfgopts => avgssim($out);
	}).list.map({stats .key, .value});

	%tmp.values.flat.map(&unlink);
}

