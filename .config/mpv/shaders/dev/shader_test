#!/usr/bin/env raku

# XXX call this script from a Makefile and maintain a text file of SSIMs for each shader
# XXX implement minimization
# XXX implement downscaling
# XXX support testing on non-yuv420p?
# XXX add option to test multiple planes at a time? (sounds like a pain)

use MONKEY-SEE-NO-EVAL;
use soft;

my %glb;

my %tmp;
END %tmp.values.flat.map(&unlink);

my $ffmpeg = "ffmpeg -nostdin -y";
my $x265 = "-c:v libx265 -x265-params lossless=1 -pix_fmt yuv420p";

&run.wrap(sub (*@args, *%opts) {
	my %opts_ = %opts;
	%opts_<out err> = %opts<out> || True, %opts<err> || True;

	@args.note if %glb<verbose>;

	if %glb<dry-run> {
		@args.note if not %glb<verbose>;
		callwith <true>, :out, :err;
	} elsif my $proc = callwith(|@args, |%opts_) {
		# drop stdout & stderr if not requested by caller
		$proc.out.slurp(:close) if not %opts<out>;
		$proc.err.slurp(:close) if not %opts<err>;
		$proc;
	} else {
		# print stdout & stderr on error
		note($proc.out.slurp(:close)) if $proc.out;
		note($proc.err.slurp(:close)) if $proc.err;
		die 'command failed: ' ~ @args;
	}
});

sub parse_ssim(Str $out) returns List() {
	$out.split("\n", :skip-empty).map({
		.split(' ')[1..*-2].map({.split(':')}).flat.hash
	})
}

# takes a list of parse_ssim outputs and returns a single hash of averages
sub avg_ssim(@ssims) returns Hash() {
	@ssims.map({.reduce(-> $frame_acc, $frame {
		$frame_acc.map({.key => .value + $frame{.key}})
	}).map({.key => .value / @ssims[0].elems})})
	.reduce(-> $realization_acc, $realization {
		$realization_acc.map({.key => .value + $realization{.key}})
	}).map({.key => .value / @ssims.elems})
}

sub run_cfg(Str $cfgopts) returns Str {
	# generate a unique filename
	my $out-shader-filename;
	loop {
		$out-shader-filename = "%glb<tmp>" ~ (^999999).rand ~ ".glsl";
		try { open(:create, :exclusive, $out-shader-filename).close; }
		last if not $!;
	}
	%tmp{$out-shader-filename} = $out-shader-filename;

	my $in-shader = open :r, %glb<shader>;
	my $out-shader = open :w, $out-shader-filename;
	given %glb<shader> {
		when /nlmeans/ {
			run <./nlmeans_cfg>, :in($in-shader), :out($out-shader),
				:env("NLM_{%glb<plane> eq 'LUMA' ?? 'LUMA' !! 'CHROMA'}" => $cfgopts,
					"NLM_OPTS" => "HOOKS=%glb<plane>");
		}
		when /guided/ {
			run <./guided_cfg>, :in($in-shader), :out($out-shader),
				:env("GUIDED_OPTS" => "$cfgopts\:HOOKS=%glb<plane>");
		}
	}
	$out-shader.close;
	$in-shader.close;

	$out-shader-filename;
}

sub shader_ssim(Str $in1, Str $in2, Str $shader) {
	my $vf = "hwupload,libplacebo=custom_shader_path=$shader,hwdownload,format=yuv420p[placebo];";
	my $null = '-f null -';
	my $proc = run <<$ffmpeg -i "$in1" -i "$in2" -init_hw_device "%glb<vk>" -lavfi "$vf [placebo]ssim=-" $null>>, :out;
	parse_ssim($proc.out.slurp(:close));
}

sub stats($cfgopts, %ssim, *%opts) {
	my $s = "$cfgopts Y %ssim<Y> U %ssim<U> V %ssim<V> All %ssim<All>\n";
	printf("$s");
	spurt %glb<statsfile>, $s, |%opts;
}

sub concat_realizations() {
	my $new-corrupt = %glb<tmp> ~ ".corrupt.mkv";
	my $vf = "concat={%tmp<corrupt>.elems},setpts=N/(FRAME_RATE*TB)";

	note('Concatenating corrupt test media files...');
	run <<$ffmpeg -i {%tmp<corrupt>.join(' -i ')} -lavfi "$vf" $x265 "$new-corrupt">>;
	%tmp<corrupt>.map(&unlink);
	%tmp<corrupt> := ($new-corrupt);
}

# XXX add short flags?
sub MAIN(
	Str $test-media,
	Str :$cfgopts = "",
	Str :$shader = "nlmeans_template",
	Str :$plane = "LUMA",
	Str :$corruption = "NOISE=5",
	Str :$tmpfile = "shader_test.tmp",
	Str :$vk-device = "vulkan",
	Str :$stats-dir = "stats",
	Int :$realizations = 50,
	Int :$jobs = 4,
	Bool :$dry-run = False,
	Bool :$verbose = False,
	Bool :$no-concat = False,
	Bool :$force = False
) {
	%glb<tmp shader dry-run verbose vk plane> = $tmpfile, $shader, $dry-run, $verbose, $vk-device, $plane;

	my @statsfile = (
		# friendly shader name
		%glb<shader>.IO.basename.subst(/nlmeans/, "NLM", :g).subst(/(_template$|\.glsl$)/, :g),
		# basename of test-media w/o extension
		$test-media.IO.basename.subst(/\..*/, :g),
		%glb<plane>, $corruption, "RZ=$realizations", "CAT={(!$no-concat).Int}", $cfgopts
	);
	%glb<statsfile> = "$stats-dir/{@statsfile.join(':').subst(/\//, "_", :g)}.stats";

	if %glb<statsfile>.IO.e and not $force {
		die "%glb<statsfile> exists; either move/remove the file or use --force to overwrite";
	}

	if not %glb<dry-run> {
		run <<renice -n 19 "$*PID">>; run <<ionice -c 3 -p "$*PID">>;
	}

	note('Encoding test media...');
	%tmp<media> = "%glb<tmp>.mkv";
	run <<$ffmpeg -i "$test-media" $x265 "%tmp<media>">>;

	# XXX add a downscale corruption for testing upscalers
	note('Corrupting test media...');
	given $corruption {
		when /^NOISE\=/ {
			my $noise = $corruption.split('=')[1];
			%tmp<corrupt> := (^$realizations).map({"%glb<tmp>.corrupt$_.mkv"});
			for ^$realizations {
				my $vf = "noise=alls=$noise\:all_seed=$_\:allf=t";
				run <<$ffmpeg -i "%tmp<media>" $x265 -vf "$vf" "%tmp<corrupt>[$_]">>;
			}
			concat_realizations() if not $no-concat;
		}
		when /^JPEG\=/ {
			my $quality = $corruption.split('=')[1];
			my $codec = "-q\:v $quality -c\:v mjpeg";
			%tmp<corrupt> = ("%glb<tmp>.corrupt.mkv");
			run <<$ffmpeg -i "%tmp<media>" $codec "%tmp<corrupt>[0]">>;
		}
	}

	note('Measuring baseline...');
	my %baseline;
	if not %glb<dry-run> {
		my $vf-ssim = "-lavfi ssim=- -f null -";
		my @baseline = %tmp<corrupt>
			.map({run <<$ffmpeg -i "%tmp<media>" -i "$_" $vf-ssim>>, :out})
			.map({parse_ssim(.out.slurp(:close))});
		%baseline = avg_ssim(@baseline.flat);
		stats "BASELINE=$corruption", %baseline;
	}

	# XXX doesn't work when only 1 parameter is specified
	# parse k=v:k=v:k=v:...
	my @cfgopts = $cfgopts.split(':', :skip-empty).map({.split('=')}).flat;
	# for restoring order after hashing; dies on duplicate keys
	my %keyorder = @cfgopts[0,2...*].unique(:with({$^x === $^y && die 'duplicate opt'})).antipairs;
	# EVAL every v in k=v:k=v:k=v:...
	my %cfgopts = @cfgopts.hash.kv.map({$^k => EVAL $^v});
	# convert to list of permutations
	@cfgopts = %cfgopts.values.reduce(&infix:<X>).map({%cfgopts.keys Z .flat});
	# convert to list of strings back to k=v:k=v:k=v:... format
	@cfgopts = @cfgopts.map({
		.sort({%keyorder{$_}}).map({.join('=')}).join(':')
	});
	# ensure non-empty
	@cfgopts = ("") if not @cfgopts;

	sprintf("Trying %d permutations...", (@cfgopts.elems || 1)).note;
	@cfgopts.note if %glb<verbose>;

	exit if %glb<dry-run>;

	@cfgopts.race(:batch(1), :degree($jobs)).map(-> $cfgopts {
		my $shader = run_cfg($cfgopts);
		my $out = $cfgopts => avg_ssim(%tmp<corrupt>.map({shader_ssim($_, %tmp<media>, $shader)}));

		unlink $shader;
		%tmp{$shader}:delete;
		$out;
	}).list.map({stats .key, .value, :append});
}

