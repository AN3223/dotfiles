#!/usr/bin/env raku

# XXX add option to test multiple planes at a time? (sounds like a pain)
# XXX make a script for plotting stats files
# XXX apparently "".split(char).elems == 1, make sure this doesn't break anything

use soft;

my %gbl;
my %tmp;
END { %tmp.values.flat.map(&unlink); rmdir %gbl<tmpdir> with %gbl<tmpdir>; };

sub ffmpeg(*@i, :@out = <-f null ->, *%opts --> List) {
	|<ffmpeg -nostdin -y>,
		|@i.map({ $_ ~~ Iterable ?? $_.flat !! <<-i "$_">> }).flat,
		|%opts.map({ "-{$_.key}", "{$_.value}" }).flat,
		|@out.flat
}

# drop stderr and/or stdout if they aren't requested
# die and print stdout & stderr if command fails
&run.wrap(sub (*@args, *%opts --> Proc) {
	%opts<out> = True without %opts<out>;
	%opts<err> = True without %opts<err>;
	note(@args) if %gbl<verbose>;

	my $proc;
	if $proc = callwith(|@args, |%opts) {
		$proc
	} else {
		with $proc {
			note($proc.out.slurp(:close)) with $proc.out;
			note($proc.err.slurp(:close)) with $proc.err;
		}
		die 'command failed: ' ~ @args;
	}
});

# GLSL macro-safe number representation
multi sub msafe(Int $x --> Str()) { $x }
multi sub msafe(Numeric $x --> Str) { sprintf('%f', $x.FatRat) }
multi sub msafe($x --> Str()) { $x }

# parses output from ffmpeg's SSIM filter and outputs an average
# XXX RGB testing is broken (not sure if it's here or somewhere else)
sub avgssim(Str $out --> FatRat) {
	$out.note if %gbl<verbose>;
	my %avg;
	$out ==> split("\n", :skip-empty)
	     ==> map({ .split(' ')[1..*-2]>>.split(':').flat.hash })
	     ==> { $_>>.FatRat }() # better precision
	     ==> { [>>+<<] $_ >>/>> .elems }() # hash average
	     ==> %avg;
	
	%avg<All>:delete;
	given %gbl<plane> {
	when 'LUMA' { return %avg<Y>; }
	when 'CHROMA' { return (%avg<U> + %avg<V>)/2; }
	default { return ([+] %avg.values) / %avg.values.elems; }
	}
}

# dispatches the appropriate cfg script (if any) w/ $cfgopts
# returns the path to the new shader
# if --vf is used then $cfgopts is just returned back
sub run_cfg(Str $cfgopts --> Str) {
	if %gbl<vf> {
		return $cfgopts;
	} elsif !$cfgopts && %gbl<shader>.IO.basename !~~ /_template$/ {
		return %gbl<shader>;
	}

	my $out-shader;
	loop { # ensure a unique filename
		try { $out-shader = open("{%gbl<tmp>}.{999.rand.Int}.glsl", :rx); }
		last if not $!;
		note($!) if %gbl<verbose>;
	}
	my $path = $out-shader.IO.path;
	LEAVE { $out-shader.close with $out-shader; }

	run <<./shader_cfg "{%gbl<shader>}" "OPTS=CFG_HOOKS={%gbl<plane>}\:$cfgopts">>, :out($out-shader);

	%tmp{$path} = $path;
}

# libplacebo filter string with resolution, format, etc. set
sub libplacebo(*@opts --> Str) {
	my Str $res = (["w=","h="] Z~ %gbl<resolution>.split(':')[0..1]).join(':');
	("libplacebo={$res}:format={%gbl<pix-fmt>}",
		|@opts,
		"dithering=none",
		"upscaler=none",
		"downscaler=none",
		"peak_detect=false").join(':')
}

# XXX should be able to handle multiple files at a time too
sub shader_ssim($corrupt-media, @shaders) {
	my @crptpads = do "[crpt$_]" for ^@shaders.elems;
	my @cleanpads = do "[clean$_]" for ^@shaders.elems;

	my &uncorruptor = %gbl<shader> ?? { libplacebo("custom_shader_path=$_") } !! { "{%gbl<vf>}=$_" };

	my $vf = (
		(("hwupload," if %gbl<shader>) ~ "split={@shaders.elems}" ~ @crptpads.join()),
		("scale={%gbl<resolution>},split={@shaders.elems}" ~ @cleanpads.join()),
		(do @crptpads[$_.key] ~ &uncorruptor($_.value) ~ "[out{$_.key}]" for @shaders.pairs).join(";\n"),
		(do "{@cleanpads[$_]}[out$_]ssim={%gbl<tmpdir>}/ssim$_" for ^@shaders).join(";\n")
	).join(";\n");

	spurt (%tmp<filter_script> = "{%gbl<tmp>}.filter_script"), $vf;
	run ffmpeg($corrupt-media, %gbl<media>, :init_hw_device(%gbl<vk>), :filter_complex_script(%tmp<filter_script>));

	my @ssims;
	for ^@shaders.elems {
		@ssims.push(slurp "{%gbl<tmpdir>}/ssim$_");
		unlink "{%gbl<tmpdir>}/ssim$_";
	}
	return @ssims;
}

sub stats($cfgopts, $ssim, :$erronly = False) {
	my $s = "{$cfgopts || 'NO_CFGOPTS'}\t$ssim";
	if $erronly {
		note($s);
	} else {
		print("$s\n");
		%gbl<statsfile>.print("$s\n") if %gbl<statsfile>;
		%gbl<statsfile>.flush if %gbl<statsfile>;
	}
	return;
}

my Int $test_len = 0;
sub run_tests(*@cfgopts --> List) {
	my @shaders = @cfgopts.map(&run_cfg);

	my @outs;
	for %tmp<corrupt><> -> $corrupt {
		# rerun batch until lengths match to work around intermittent libplacebo(?) failure
		my (@ssims, @linec);
		repeat {
			@ssims = shader_ssim($corrupt, @shaders);
			@linec = List(@ssims.map({ .split("\n").elems }));
			$test_len = @linec[0] if not $test_len and @linec[0] == all(@linec);
		} until $test_len == all(@linec);

		# join ssim outputs for each file
		for @ssims.kv -> $i, $ssim {
			@outs[$i] = join("\n", (@outs[$i] if @outs[$i]), $ssim);
		}
	}

	@shaders.map({ unlink %tmp{$_}:delete with %tmp{$_} });
	return eager @outs.map(&avgssim);
}

sub correlation(@x, $x_avg, @y, $y_avg) { covariance(@x, $x_avg, @y, $y_avg) / max(1e-38, sqrt(variance(@x, $x_avg)) * sqrt(variance(@y, $y_avg))) }
sub covariance(@x, $x_avg, @y, $y_avg) { sum((@x >>->> $x_avg) >>*<< (@y >>->> $y_avg)) / @x }
sub variance(@x, $avg) { sum((@x >>->> $avg) >>**>> 2) / @x }
sub standard(@x, $avg) { (@x >>->> $avg) >>/>> sqrt(variance(@x, $avg)) }
multi sub transpose(@a where *.elems == 1) { @a[0].rotor(1) }
multi sub transpose(@x) { [Z] @x }

# Description of the algorithm:
#
# 1) Start with an estimate of the optimal parameters (@starts)
# 2) Sample randomly around that estimate
# 	- The random offsets are standardized for each parameter
# 		- In many cases (e.g., first iteration) this ensures each parameter is increased and decreased
# 	- Add the correlation of the previous iteration to the random offsets (0.0 for the first iteration)
# 	- Multiply the random offsets by the decay factor (1.0 for the first iteration)
# 3) Replace the estimate with the best sample if it is better than the estimate
# 	- If the estimate was replaced, multiply the decay factor by the reverse decay parameter ($rev-decay)
# 	- Otherwise, multiply the decay factor by the decay parameter ($decay)
# 4) Update correlation
# 	- The correlation is the Pearson correlation coefficient between each parameter and the score
# 	- E.g., [correlation(param1, scores), correlation(param2, scores), ...]
# 	- The scope of the correlation is only 1 iteration, previous iterations are ignored
# 5) Repeat steps 1-4 until either the iteration limit is reached or the decay falls below a user-defined threshold
#
sub optimize(
	&f, #= function to optimize, takes a list of parameter lists and returns a list of scores
	:@starts = (Nil,), #= starting points for the values passed to &f
	:@steps = (Nil,), #= scales the offsets, ideally 0.0 or above
	:$decay = 0.05, #= ideally 0.0-1.0
	:$rev-decay = 1.5, #= ideally 1.0-2.0
	:$min-decay = 1e-4, #= exit if decay is lower than this (may be zero)
	:$samples = 15, #= samples per iteration
	:$iter = 35 #= exit after this many iterations (may be Inf)
) {
	# replace Nil with defaults
	my @starts_ = List(@starts.map({ with $_ { $_ } else { 1 } }));
	my @steps_ = List(@steps.map({ with $_ { $_ } else { 0.25 } }));

	my $optimal = &f([@starts_,])[0]; # XXX could be batched
	my @steps_m = @steps_ xx $samples;
	my @cor = 0 xx @steps_;
	my $decay_factor = 1.0;

	for ^$iter {
		my @params = $optimal.key xx $samples;

		# matrix of random offsets, standardized by column (parameter)
		my @rand = 1.rand xx @steps_ xx $samples;
		@rand = transpose(List(transpose(@rand).map({ standard(@^x, sum(@^x)/@^x) })));

		my @off_factor = (@rand >>+<< (@cor xx $samples)) >>*>> $decay_factor;
		@params = @params >>+<< (@params >>*<< @steps_m >>*<< @off_factor);

		my @results = &f(@params).sort(*.value);
		if @results[*-1].value <= $optimal.value {
			$decay_factor *= $decay;
		} else {
			$decay_factor *= $rev-decay;
			$optimal = @results[*-1];
		}

		my @scores = @results.map(*.value);
		my $score_avg = sum(@scores) / @scores;
		@cor = transpose(@results.map(*.key))
			.map({ correlation(@^x, sum(@^x)/@^x, @scores, $score_avg) })
			.List;
		note("Correlation: {@cor}");
		note("Decay: {$decay_factor}");

		last if $decay_factor <= $min-decay;
		last if @scores.unique().elems == 1;
	}

	return $optimal;
}

# glue/wrapper function for run_tests & optimizer
# XXX batch this across permutations
sub test(Str $cfgopts = "") {
	my @cfgopts = $cfgopts.split(/<[=:]>/, :skip-empty).rotor(2);
	my %cfgopts = $cfgopts.split(/<[=:]>/, :skip-empty);

	my %optimize_args = options => [], starts => [], steps => [];
	for %gbl<max>.split(":", :skip-empty) -> $args { 
		my ($option, $start, $step) = $args.split("=");

		# --max overrides --cfgopts
		$start = %cfgopts{$option} without $start;
		@cfgopts .= grep({ $_[0] !=== $option });

		%optimize_args<options>.push($option);
		%optimize_args<starts>.push($start);
		%optimize_args<steps>.push($step);
	}

	my $cfgopts_ = @cfgopts>>.join("=").join(":");

	if %optimize_args<options> {
		my @options := %optimize_args<options>:delete;
		my &params2opts = -> @params {
			((@options Z~ ("=" xx @options) Z~ @params).join(":"), $cfgopts_).join(":")
		};
		my &f = -> @arr_of_params {
			my @cfgopts = List(@arr_of_params.map(&params2opts));
			my @scores = run_tests(|@cfgopts);
			(@cfgopts Z=> @scores).map: { stats(.key, .value, :erronly) };
			@arr_of_params Z=> @scores
		};
		%gbl.map({ %optimize_args{$^p.key.subst(/^max\-/)} = $^p.value if $^p.key ~~ /^max\-/ && $^p.value.defined });

		my $result = optimize(&f, |%optimize_args);
		stats(&params2opts($result.key), $result.value);
	} else {
		stats($cfgopts_, run_tests($cfgopts_)[0]);
	}
}

# XXX add a "bring your own" corruption where you can specify your own corrupt test media
# XXX maybe measure baseline here?
sub corrupt(Str $name, Str $corruptions, Bool $no-concat) {
	my Int $realizations = 1;
	my Str @pre-vf;
	my Callable @vf;
	my %outopts = %gbl<outopts>;
	for $corruptions.split(/<!after '\\'> ',' /) -> $corruption {
		given $corruption.split('=') {
		when $_[0] eq "NOISE" { # NOISE=NOISE_LEVEL:REALIZATIONS
			my ($noise, $realizations_) = $_[1].split(':');
			$realizations = Int($realizations_);
			@vf.push({ "noise=alls=$noise\:all_seed=$^i\:allf=t" });
		}
		when $_[0] eq "OUTOPTS" { # OUTOPTS=OPTS
			%outopts{$_.keys.map({ .subst(/^\-/) })} = $_.values given Hash($_[1..*].join("=").split(" "));
		}
		when $_[0] eq "VF" { # VF=VF
			@pre-vf.push($_[1..*].join("="));
		}
		}
	}

	@pre-vf.push("split=$realizations");
	@vf.push({ "split=1" }) if @vf.elems == 0;
	my Str $vf = (
		@pre-vf.join(",") ~ ((do "[s$_]" for ^$realizations).join()),
		(do "[s$_]{@vf.map({ $^f($_) }).join(',')}[o$_]" for ^$realizations).join(";\n"),
		((do "[o$_]" for ^$realizations).join() ~ "concat=$realizations,setpts=N/(FR*TB)" if not $no-concat)
	).join(";\n");

	my @outs;
	my @outfiles;
	if $no-concat {
		@outfiles = do "{%gbl<tmp>}.{$name}{$_}.mkv" for ^$realizations;
		@outs = @outfiles.pairs.map({ ("-map", "[o{$_.key}]", $_.value) }).flat;
	} else {
		@outfiles = ("{%gbl<tmp>}.{$name}.mkv");
		@outs = (@outfiles[0]);
	}

	spurt (%tmp<filter_script> = "{%gbl<tmp>}.filter_script"), $vf;
	run ffmpeg(%tmp<media>, :filter_complex_script(%tmp<filter_script>), |%outopts, :out(@outs));

	return { :realizations($realizations), :files(@outfiles) };
}

# recursive ls
sub find(IO::Path() $f --> Array()) { $f.d ?? dir($f).flatmap(&find) !! ($f) }

sub MAIN(
	#= script for testing the SSIM between corrupt->filtered image and the original image
	*@test-media, #= Files/directories to test on
	Str :$acorruption = "", #= Anti-corruption type (applied to clean image), NOISE/OUTOPTS/VF
	Str :$cfgopts = "", #= Arguments passed to the dispatched _cfg script, if dispatched
	Str :$colorspace = "bt709", #= Colorspace used for everything
	Str :$corruption = "NOISE=10:10", #= Corruption type, NOISE/OUTOPTS/VF
	Bool :$force = False, #= Force overwrite the stats file
	Str :$max = "", #= Optimizer settings: OPTION=START=STEP (all optional, multiple can be chained with colons)
	Bool :$auto-max = False, #= Pass all floating point --cfgopts to --max
	Rat() :$max-decay, #= Optimizer decay
	Int :$max-iter, #= Optimizer iterations
	Rat() :$max-min-decay, #= Optimizer minimum decay, exits early when the decay falls below this
	Rat() :$max-rev-decay, #= Optimizer reverse decay
	Int :$max-samples, #= Optimizer samples per iteration
	Bool :$no-baseline = False, #= Skip baseline
	Bool :$no-concat = False, #= Skip concatenation step, very slow but may be necessary for temporal testing
	Bool :$no-stats = False, #= Skip writing to a stats file (still requires a real --stats-dir)
	Str :$optimum = "", #= Prepend cfgopts with the first record of the last line of a tab delimited file (ignoring comments and blank lines)
	Bool :$optimum-parent = True, #= Use dirname(dirname(--optimum))/basename(--optimum) if it exists
	Str :$pix-fmt = "yuv444p", #= Pixel format used for everything
	Str :$plane = "LUMA", #= Plane to test on
	Str :$resolution where /^\d+ ':' \d+$/ = "1080:1080", #= Resolution used for everything
	Str :$shader where *.IO.r = "nlmeans_template", #= Shader used for testing
	Str :$stats-dir where *.IO.d = "stats", #= Directory where stats will be stored
	Str :$tmpdir where *.IO.d = '/dev/shm', #= Directory for temporary files
	Bool :$verbose = False, Bool :$v = False, #= Verbose output for debugging
	Str :$vf = "", #= Test an ffmpeg filter instead of a shader, accepts --cfgopts and overrides --shader
	Str :$vk-device = "vulkan" #= Device name passed to ffmpeg's -init_hw_device option
) {
	%gbl<shader vf verbose vk plane resolution pix-fmt> = $shader, $vf, ($verbose || $v), $vk-device, $plane, $resolution, $pix-fmt;
	%gbl<outopts> = { "c:v" => "ffv1", "colorspace" => $colorspace, "pix_fmt" => $pix-fmt };
	%gbl<max max-iter max-samples max-decay max-min-decay> = $max, $max-iter, $max-samples, $max-decay, $max-min-decay;
	%gbl<shader> = "" if %gbl<vf>;

	die 'no test media specified' if not @test-media;

	%gbl<tmpdir> = run(<<mktemp -d "$tmpdir/shader_test.XXXXXX">>, :out).out.slurp(:close).subst("\n");
	%gbl<tmp> = %gbl<tmpdir> ~ '/shader_test.tmp';

	my @statsfile_base = @*ARGS.grep(/^\-/)
			# strip less relevant options
			.grep(none /^\-\-force/, /^\-\-no\-stats/, /^\-\-verbose/,
			           /^\-\-tmpdir/, /^\-\-stats\-dir/, /^\-\-vk\-device/)
			# strip - and --
			.map({ S:g/^\-\-?// });
	@statsfile_base.push("media=" ~ @test-media.map({ .IO.basename.split('.', :skip-empty)[0] }).join(','));

	# shorten the stats filename if it's too long
	my &statsfile =          { @statsfile_base.join('_').trans('/' => '\\') ~ ".stats" };
	my &statsfile_too_long = { (&statsfile() ~ ".bz2").encode.bytes > 255 };
	@statsfile_base .= grep(none /^max\=/) if &statsfile_too_long();
	if &statsfile_too_long() or ("$stats-dir/" ~ &statsfile()).IO.e
	                         or ("$stats-dir/" ~ &statsfile() ~ ".bz2").IO.e {
		my $proc = run("sha1sum", :in(&statsfile(@statsfile_base)), :out);
		my $hash = $proc.out.slurp.split(" ")[0];
		@statsfile_base = $hash;
	}

	my $statsfile = "$stats-dir/" ~ &statsfile();

	@test-media = @test-media.flatmap(&find).grep({ $_.path !~~ /\.txt$/ });
	@test-media.map({ .f || die "$_ doesn't exist or is unreadable" });

	if not $no-stats {
		if $force {
			%gbl<statsfile> = open $statsfile, :w;
		} else {
			die 'stats file exists' if "$statsfile.bz2".IO.e;
			try { %gbl<statsfile> = open $statsfile, :x; }
			die 'stats file exists' if $!;
		}
	}

	run <<renice -n 19 "$*PID">>; run <<ionice -c 3 -p "$*PID">>;

	note('Preparing clean images...');
	my $clean-lavfi = :lavfi("concat={@test-media.elems},setpts=N/(FR*TB)" if @test-media > 1);
	run ffmpeg(|@test-media.flat, |$clean-lavfi, :init_hw_device(%gbl<vk>), |%gbl<outopts>, :out(%tmp<media> = "{%gbl<tmp>}.concat.mkv"));

	# XXX support --no-concat here?
	my $acorr_realizations = 1;
	if $acorruption {
		my %corrupt = corrupt("acorrupt", $acorruption, False);
		%tmp<media_> = %corrupt<files>[0];
		$acorr_realizations = %corrupt<realizations>;
	}

	note('Preparing corrupt images...');
	my %corrupt = corrupt("corrupt", $corruption, $no-concat);
	my $realizations = %corrupt<realizations>;
	%tmp<corrupt> = %corrupt<files>;
	if $acorruption {
		unlink %tmp<media>;
		%tmp<media> = %tmp<media_>:delete;
	}
	if not $no-concat && $realizations > 1 {
		%gbl<media> = <<-stream_loop "{$realizations / $acorr_realizations - 1}" -i "%tmp<media>">>;
	} else {
		%gbl<media> = <<-i "%tmp<media>">>;
	}

	if not $no-baseline {
		note('Measuring baseline...');
		my $baseline = avgssim(%tmp<corrupt>.map({
			run(ffmpeg($_, %gbl<media>, :init_hw_device(%gbl<vk>), :lavfi("scale={%gbl<resolution>},ssim=-"), |%gbl<outopts>)
			).out.slurp(:close)
		}).join("\n"));
		stats "# BASELINE=$corruption", $baseline;
	}

	my $cfgopts_ = $cfgopts;
	if $optimum {
		my $f = $optimum.IO;
		$f = $_ if $_.e && $optimum-parent given $f.parent.parent.child($f.basename);
		die 'optimum file "$f" does not exist' if not $f.e;
		my @lines = $f.slurp.split("\n");
		@lines .= grep(none /^$/, /^\#/);
		if @lines {
			$cfgopts_ ~= ":" ~ @lines[*-1].split("\t")[0];
		} else {
			$cfgopts_ = "NO_CFGOPTS";
		}
	}

	my @cfgopts;
	my @flatopts = $cfgopts_.split(/<[=:]>/, :skip-empty); # parse k=v:k=v:k=v:...
	@flatopts = () if @flatopts.elems == 1 && @flatopts[0] eq "NO_CFGOPTS";
	die 'invalid cfgopts' if @flatopts.elems and not @flatopts.elems %% 2;
	my @opts = @flatopts.pairup();
	@opts .= unique(:with({
		$^x.key === $^y.key && warn "duplicate cfgopt: $^x";
		$^x.key === $^y.key
	}));
	if @opts {
		# eval opt values when they are prefixed with $
		# this enables list values, every permutation will be tested

		use MONKEY-SEE-NO-EVAL;
		my &eval = { $_ ~~ /^\$/ ?? EVAL($_.subst(/^\$/)) !! $_ };
		@opts .= map({ .key => eval(.value) });

		@cfgopts = do given @opts.elems {
			when 1 { @opts[0].value.map({ "{@opts[0].key}=$_" }) }
			default {
				[X] @opts.map(*.value)
				==> map({ @opts.map(*.key) Z $_ })      # generate permutations
				==> map({ $_>>.map(&msafe)>>.join('=').join(':') }) # stringify
			}
		}
	} else {
		@cfgopts = ("");
	}
	if $auto-max {
		for @opts {
			try {
				my $num = +$_.value;
				%gbl<max> ~= ":{$_.key}" if $num ~~ Rat;
			}
		}
		%gbl<max> ~~ s/^\://;
	}

	note("Trying {@cfgopts.elems || 1} permutations...");
	note(@cfgopts.raku) if %gbl<verbose>;

	@cfgopts.map(&test);

	if %gbl<statsfile> {
		%gbl<statsfile>.close();
		note("\nSorted worst to best:\n");
		run(<sort -k 2 -n>, :in(open %gbl<statsfile>.IO.path), :out)
			.out.slurp(:close).split("\n")
			==> { .elems < 15 ?? $_ !! $_[*-15..*] }() # last 15 or less
			==> join("\n") ==> note();

		run <bzip2 -9>, ('-f' if $force), %gbl<statsfile>.IO.path;
	}

	put "";
}

