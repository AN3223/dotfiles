#!/usr/bin/env raku

# XXX call this script from a Makefile and maintain a text file of SSIMs for each shader
# XXX add option to test multiple planes at a time? (sounds like a pain)
# XXX make a script for plotting stats files
# XXX apparently "".split(char).elems == 1, make sure this doesn't break anything

use MONKEY-SEE-NO-EVAL;
use soft;

my %gbl;
my %tmp;
END { %tmp.values.flat.map(&unlink); rmdir %gbl<tmpdir> with %gbl<tmpdir>; };

my $ffmpeg = "ffmpeg -nostdin -y";
# drop stderr and/or stdout if they aren't requested
# die and print stdout & stderr if command fails
&run.wrap(sub (*@args, *%opts --> Proc) {
	%opts<out> = True without %opts<out>;
	%opts<err> = True without %opts<err>;
	note(@args) if %gbl<verbose>;

	my $proc;
	if $proc = callwith(|@args, |%opts) {
		$proc
	} else {
		with $proc {
			note($proc.out.slurp(:close)) with $proc.out;
			note($proc.err.slurp(:close)) with $proc.err;
		}
		die 'command failed: ' ~ @args;
	}
});

# GLSL macro-safe number representation
multi sub msafe(Int $x --> Str()) { $x }
multi sub msafe(Numeric $x --> Str) { sprintf('%f', $x.FatRat) }
multi sub msafe($x --> Str()) { $x }

# parses output from ffmpeg's SSIM filter and outputs an average
# XXX RGB testing is broken (not sure if it's here or somewhere else)
sub avgssim(Str $out --> FatRat) {
	$out.note if %gbl<verbose>;
	my %avg;
	$out ==> split("\n", :skip-empty)
	     ==> map({ .split(' ')[1..*-2]>>.split(':').flat.hash })
	     ==> { $_>>.FatRat }() # better precision
	     ==> { [>>+<<] $_ >>/>> .elems }() # hash average
	     ==> %avg;
	
	%avg<All>:delete;
	given %gbl<plane> {
	when 'LUMA' { return %avg<Y>; }
	when 'CHROMA' { return (%avg<U> + %avg<V>)/2; }
	default { return ([+] %avg.values) / %avg.values.elems; }
	}
}

# dispatches the appropriate cfg script (if any) w/ $cfgopts
# returns the path to the new shader
# XXX allow custom cfg scripts to be dispatched?
sub run_cfg(Str $cfgopts --> Str) {
	return %gbl<shader> if !$cfgopts && %gbl<shader>.IO.basename !~~ /_template$/;

	my $out-shader;
	loop { # ensure a unique filename
		try { $out-shader = open("{%gbl<tmp>}.{999.rand.Int}.glsl", :rx); }
		last if not $!;
		note($!) if %gbl<verbose>;
	}
	my $path = $out-shader.IO.path;
	LEAVE { $out-shader.close with $out-shader; }

	run <<./shader_cfg "{%gbl<shader>}" "OPTS=CFG_HOOKS={%gbl<plane>}\:$cfgopts">>, :out($out-shader);

	%tmp{$path} = $path;
}

# XXX should be able to handle multiple files at a time too
sub shader_ssim($corrupt-media, @shaders) {
	my Str $res = %gbl<resolution>.split(':')[0..1].join(':');
	my Bool $batch = @shaders.elems > 1;

	my (@crptpads, @inpads);
	if $batch {
		@crptpads = do "[crpt$_]" for ^@shaders.elems;
		@inpads = do "[in$_]" for ^@shaders.elems;
	} else {
		@crptpads = "[0:v]";
		@inpads = "[1:v]";
	}

	my $vf = (
		("hwupload,split={@shaders.elems}" ~ @crptpads.join() if $batch),
		("split={@shaders.elems}" ~ @inpads.join() if $batch),
		(do @crptpads[$_.key] ~ ("hwupload," if not $batch) ~ "libplacebo=$res\:{%gbl<pix-fmt>}:custom_shader_path={$_.value},hwdownload[out{$_.key}]" for @shaders.pairs).join(";\n"),
		(do "{@inpads[$_]}[out$_]ssim={%gbl<tmpdir>}/ssim$_" for ^@shaders.elems).join(";\n")
	).join(";\n");

	spurt (%tmp<filter_script> = "{%gbl<tmp>}.filter_script"), $vf;
	run(<<$ffmpeg -i "$corrupt-media">>, |%gbl<media>, <<-init_hw_device "%gbl<vk>" -filter_complex_script "{%tmp<filter_script>}" -f null ->>);

	my @ssims;
	for ^@shaders.elems {
		@ssims.push(slurp "{%gbl<tmpdir>}/ssim$_");
		unlink "{%gbl<tmpdir>}/ssim$_";
	}
	return @ssims;
}

sub stats($cfgopts, $ssim, :$erronly = False) {
	my $s = "{$cfgopts || 'NO_CFGOPTS'} $ssim";
	if $erronly {
		note($s);
	} else {
		print("$s\n");
		%gbl<statsfile>.print("$s\n") if %gbl<statsfile>;
		%gbl<statsfile>.flush if %gbl<statsfile>;
	}
	return;
}

my Int $test_len = 0;
sub run_tests(*@cfgopts --> List) {
	my @shaders = @cfgopts.map(&run_cfg);

	my @outs;
	for %tmp<corrupt><> -> $corrupt {
		# rerun batch until lengths match to work around intermittent libplacebo(?) failure
		my (@ssims, @linec);
		repeat {
			@ssims = shader_ssim($corrupt, @shaders);
			@linec = List(@ssims.map({ .split("\n").elems }));
			$test_len = @linec[0] if not $test_len and @linec[0] == all(@linec);
		} until $test_len == all(@linec);

		# join ssim outputs for each file
		for @ssims.kv -> $i, $ssim {
			@outs[$i] = join("\n", (@outs[$i] if @outs[$i]), $ssim);
		}
	}

	@shaders.map({ unlink %tmp{$_}:delete with %tmp{$_} });
	return eager @outs.map(&avgssim);
}

sub correlation(@x, $x_avg, @y, $y_avg) { covariance(@x, $x_avg, @y, $y_avg) / (sqrt(variance(@x, $x_avg)) * sqrt(variance(@y, $y_avg))) }
sub covariance(@x, $x_avg, @y, $y_avg) { sum((@x >>->> $x_avg) >>*<< (@y >>->> $y_avg)) / @x }
sub variance(@x, $avg) { sum((@x >>->> $avg) >>**>> 2) / @x }
sub standard(@x, $avg) { (@x >>->> $avg) >>/>> sqrt(variance(@x, $avg)) }
multi sub transpose(@a where *.elems == 1) { @a[0].rotor(1) }
multi sub transpose(@x) { [Z] @x }

# Description of the algorithm:
#
# 1) Start with an estimate of the optimal parameters (@starts)
# 2) Sample randomly around that estimate
# 	- The random offsets are standardized for each parameter
# 		- In many cases (e.g., first iteration) this ensures each parameter is increased and decreased
# 	- Add the correlation of the previous iteration to the random offsets (0.0 for the first iteration)
# 	- Multiply the random offsets by the decay factor (1.0 for the first iteration)
# 3) Replace the estimate with the best sample if it is better than the estimate
# 	- If the estimate was replaced, multiply the decay factor by the reverse decay parameter ($rev-decay)
# 	- Otherwise, multiply the decay factor by the decay parameter ($decay)
# 4) Update correlation
# 	- The correlation is the Pearson correlation coefficient between each parameter and the score
# 	- E.g., [correlation(param1, scores), correlation(param2, scores), ...]
# 	- The scope of the correlation is only 1 iteration, previous iterations are ignored
# 5) Repeat steps 1-4 until either the iteration limit is reached or the decay falls below a user-defined threshold
#
sub optimize(
	&f, #= function to optimize, takes a list of parameter lists and returns a list of scores
	:@starts = (Nil,), #= starting points for the values passed to &f
	:@steps = (Nil,), #= scales the offsets, ideally 0.0 or above
	:$decay = 0.1, #= ideally 0.0-1.0
	:$rev-decay = 1.5, #= ideally 1.0-2.0
	:$min-decay = 1e-4, #= exit if decay is lower than this (may be zero)
	:$samples = 20, #= samples per iteration
	:$iter = 50 #= exit after this many iterations (may be Inf)
) {
	# replace Nil with defaults
	my @starts_ = List(@starts.map({ with $_ { $_ } else { 1 } }));
	my @steps_ = List(@steps.map({ with $_ { $_ } else { 0.25 } }));

	my $optimal = &f([@starts_,])[0]; # XXX could be batched
	my @steps_m = @steps_ xx $samples;
	my @cor = 0 xx @steps_;
	my $decay_factor = 1.0;

	for ^$iter {
		my @params = $optimal.key xx $samples;

		# matrix of random offsets, standardized by column (parameter)
		my @rand = 1.rand xx @steps_ xx $samples;
		@rand = transpose(List(transpose(@rand).map({ standard(@^x, sum(@^x)/@^x) })));

		my @off_factor = (@rand >>+<< (@cor xx $samples)) >>*>> $decay_factor;
		@params = @params >>+<< (@params >>*<< @steps_m >>*<< @off_factor);

		my @results = &f(@params).sort(*.value);
		if @results[*-1].value < $optimal.value {
			$decay_factor *= $decay;
		} else {
			$decay_factor *= $rev-decay;
			$optimal = @results[*-1];
		}

		my @scores = @results.map(*.value);
		my $score_avg = sum(@scores) / @scores;
		@cor = transpose(@results.map(*.key))
			.map({ correlation(@^x, sum(@^x)/@^x, @scores, $score_avg) })
			.List;
		note("Correlation: {@cor}");
		note("Decay: {$decay_factor}");

		last if $decay_factor <= $min-decay;
	}

	return $optimal;
}

# glue/wrapper function for run_tests & optimizer
# XXX batch this across permutations
sub test(Str $cfgopts = "") {
	my %optimize_args = options => [], starts => [], steps => [];
	for %gbl<max>.split(":", :skip-empty) -> $args { 
		my ($option, $start, $step) = $args.split("=");
		%optimize_args<options>.push($option);
		%optimize_args<starts>.push($start);
		%optimize_args<steps>.push($step);
	}

	if %optimize_args<options> {
		my @options := %optimize_args<options>:delete;
		my &params2opts = -> @params {
			(@options Z~ ("=" xx @options) Z~ @params)
				.join(":") ~ ":" ~ $cfgopts
		};
		my &f = -> @arr_of_params {
			my @cfgopts = List(@arr_of_params.map(&params2opts));
			my @scores = run_tests(|@cfgopts);
			(@cfgopts Z=> @scores).map: { stats(.key, .value, :erronly) };
			@arr_of_params Z=> @scores
		};
		%gbl.map({ %optimize_args{$^p.key.subst(/^max\-/)} = $^p.value if $^p.key ~~ /^max\-/ && $^p.value.defined });

		my $result = optimize(&f, |%optimize_args);
		stats(&params2opts($result.key), $result.value);
	} else {
		stats($cfgopts, run_tests($cfgopts)[0]);
	}
}

# XXX add a "bring your own" corruption where you can specify your own corrupt test media
# XXX maybe measure baseline here?
sub corrupt(Str $corruptions, Bool $no-concat --> Int) {
	my Int $realizations = 1;
	my Str @pre-vf;
	my Callable @vf;
	my @outopts = |%gbl<outopts>;
	for $corruptions.split(',') -> $corruption {
		given $corruption.split('=') {
		when $_[0] eq "NOISE" { # NOISE=NOISE_LEVEL:REALIZATIONS
			my ($noise, $realizations_) = $_[1].split(':');
			$realizations = Int($realizations_);
			@vf.push({ "noise=alls=$noise\:all_seed=$^i\:allf=t" });
		}
		when $_[0] eq "OUTOPTS" { # OUTOPTS=OPTS
			@outopts = Array($_[1..*].join("=").split(" "));
		}
		when $_[0] eq "VF" { # VF=VF
			@pre-vf.push($_[1..*].join("="));
		}
		}
	}

	@pre-vf.push("split=$realizations");
	@vf.push({ "split=1" }) if @vf.elems == 0;
	my Str $vf = (
		@pre-vf.join(",") ~ ((do "[s$_]" for ^$realizations).join()),
		(do "[s$_]{@vf.map({ $^f($_) }).join(',')}[o$_]" for ^$realizations).join(";\n"),
		((do "[o$_]" for ^$realizations).join() ~ "concat=$realizations,setpts=N/(FR*TB)" if not $no-concat)
	).join(";\n");

	my @outs;
	if $no-concat {
		%tmp<corrupt> = do "{%gbl<tmp>}.corrupt$_.mkv" for ^$realizations;
		@outs = %tmp<corrupt>.pairs.map({ (|@outopts, "-map", "[o{$_.key}]", $_.value) }).flat;
	} else {
		%tmp<corrupt> = ("{%gbl<tmp>}.corrupt.mkv");
		@outs = (|@outopts, %tmp<corrupt>[0]);
	}

	spurt (%tmp<filter_script> = "{%gbl<tmp>}.filter_script"), $vf;
	run <<$ffmpeg -i "%tmp<media>" -filter_complex_script "{%tmp<filter_script>}">>, |@outs;

	return $realizations;
}

# recursive ls
sub find(IO::Path() $f --> Array()) { $f.d ?? dir($f).flatmap(&find) !! ($f) }

sub MAIN(
	#= script for testing the SSIM between corrupt->filtered image and the original image
	*@test-media, #= Files/directories to test on
	Str :$cfgopts = "", #= Arguments passed to the dispatched _cfg script, if dispatched
	Str :$shader where *.IO.r = "nlmeans_template", #= Shader used for testing
	Str :$plane = "LUMA", #= Plane to test on
	Str :$corruption = "NOISE=10:10", #= Corruption type, can be NOISE, JPEG, or SCALE
	Str :$vk-device = "vulkan", #= Device name passed to ffmpeg's -init_hw_device option
	Str :$stats-dir where *.IO.d = "stats", #= Directory where stats will be stored
	Str :$max = "", #= Optimizer settings: OPTION=START=STEP (all optional, multiple can be chained with colons)
	Int :$max-iter, #= Optimizer iterations
	Int :$max-samples, #= Optimizer samples per iteration
	Rat() :$max-decay, #= Optimizer decay
	Rat() :$max-rev-decay, #= Optimizer reverse decay
	Rat() :$max-min-decay, #= Optimizer minimum decay, exits early when the decay falls below this
	Str :$pix-fmt = "yuv444p", #= Pixel format used for everything
	Str :$colorspace = "bt709", #= Colorspace used for everything
	Str :$resolution where /^\d+ ':' \d+$/ = "1080:1080", #= Resolution used for everything
	Str :$tmpdir where *.IO.d = '/dev/shm', #= Directory for temporary files
	Bool :$no-stats = False, #= Skip writing to a stats file (still requires a real --stats-dir)
	Bool :$verbose = False, Bool :$v = False, #= Verbose output for debugging
	Bool :$no-concat = False, #= Skip concatenation step, very slow but may be necessary for temporal testing
	Bool :$force = False #= Force overwrite the stats file
) {
	%gbl<shader verbose vk plane resolution pix-fmt> = $shader, ($verbose || $v), $vk-device, $plane, $resolution, $pix-fmt;
	%gbl<outopts> = <<-c\:v ffv1 -colorspace "$colorspace" -pix_fmt "$pix-fmt">>;
	%gbl<max max-iter max-samples max-decay max-min-decay> = $max, $max-iter, $max-samples, $max-decay, $max-min-decay;

	die 'no test media specified' if not @test-media;

	%gbl<tmpdir> = run(<<mktemp -d "$tmpdir/shader_test.XXXXXX">>, :out).out.slurp(:close).subst("\n");
	%gbl<tmp> = %gbl<tmpdir> ~ '/shader_test.tmp';

	my @statsfile_base = @*ARGS.grep(/^\-/)
			# strip less relevant options
			.grep(none /^\-\-force/, /^\-\-no\-stats/, /^\-\-verbose/,
			           /^\-\-tmpdir/, /^\-\-stats\-dir/, /^\-\-vk\-device/)
			# strip - and --
			.map({ S:g/^\-\-?// });
	@statsfile_base.push("media=" ~ @test-media.map({ .IO.basename.split('.', :skip-empty)[0] }).join(','));

	# shorten the stats filename if it's too long
	my &statsfile_too_long = { (@statsfile_base.join("_") ~ ".stats.bz2").encode.bytes > 255 };
	@statsfile_base .= grep(none /^cfgopts\=/) if &statsfile_too_long();
	@statsfile_base .= grep(none /^max\=/) if &statsfile_too_long();
	if &statsfile_too_long() {
		my $proc = run("sha256sum", :in(@statsfile_base), :out);
		my $hash = $proc.out.slurp.split(" ")[0];
		@statsfile_base = $hash;
	}

	my $statsfile = "$stats-dir/" ~ @statsfile_base.join('_').trans('/' => '\\') ~ ".stats";

	@test-media = @test-media.flatmap(&find).grep({ $_.path !~~ /\.txt$/ });
	@test-media.map({ .f || die "$_ doesn't exist or is unreadable" });

	run <<renice -n 19 "$*PID">>; run <<ionice -c 3 -p "$*PID">>;
	if not $no-stats {
		if $force {
			%gbl<statsfile> = open $statsfile, :w;
		} else {
			die 'stats file exists' if "$statsfile.bz2".IO.e;
			try { %gbl<statsfile> = open $statsfile, :x; }
			die 'stats file exists' if $!;
		}
	}

	note('Encoding test media...');
	%tmp<media> = "{%gbl<tmp>}.concat.mkv";
	run <<$ffmpeg>>, @test-media.map({ ('-i', $_) }).flat,
		(<<-lavfi "concat={@test-media.elems},setpts=N/(FR*TB)">> if @test-media.elems > 1),
		|%gbl<outopts>, %tmp<media>;

	note('Corrupting test media...');
	my $realizations = corrupt($corruption, $no-concat) - 1;
	if not $no-concat && $realizations > 0 {
		%gbl<media> = <<-stream_loop "$realizations" -i "%tmp<media>">>;
	} else {
		%gbl<media> = <<-i %tmp<media>>>;
	}

	note('Measuring baseline...');
	# XXX baseline should be generated from libplacebo upscaling
	my $baseline = avgssim(%tmp<corrupt>.map({
		run(<<$ffmpeg -i "$_">>, |%gbl<media>, <<-lavfi "scale={%gbl<resolution>},ssim=-">>, |%gbl<outopts>, <-f null ->, :out).out.slurp(:close)
	}).join("\n"));
	stats "BASELINE=$corruption", $baseline;

	my @flatopts = $cfgopts.split(/<[=:]>/, :skip-empty); # parse k=v:k=v:k=v:...
	die 'invalid cfgopts' if @flatopts.elems && not @flatopts.elems %% 2;
	my @opts = @flatopts[0,2...*].unique(:with({ $^x === $^y && die 'duplicate opt' }));
	my @values = @flatopts[1,3...*].map(&EVAL);
	my @cfgopts = do given @opts.elems {
		when 0 { ("") }
		when 1 { @values[0].map({ "@opts[0]=$_" }) }
		default {
			[X] @values ==> map({ @opts Z $_ }) # generate permutations
			            ==> map({ $_>>.map(&msafe)>>.join('=').join(':') }) # stringify
		}
	}

	note("Trying {@cfgopts.elems || 1} permutations...");
	note(@cfgopts.raku) if %gbl<verbose>;

	@cfgopts.map(&test);

	if %gbl<statsfile> {
		%gbl<statsfile>.close();
		note("\nSorted worst to best:\n");
		run(<sort -k 2 -n>, :in(open %gbl<statsfile>.IO.path), :out)
			.out.slurp(:close).split("\n")
			==> { .elems < 15 ?? $_ !! $_[*-15..*] }() # last 15 or less
			==> join("\n") ==> note();

		run <bzip2 -9>, ('-f' if $force), %gbl<statsfile>.IO.path;
	}
}

