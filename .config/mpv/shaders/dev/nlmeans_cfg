#!/usr/bin/awk -f
# This script modifies/generates preprocessor/GLSL code for nlmeans. Usage 
# examples can be found in Makefile.nlm

function hooks(no_bind) {
	for (i in HOOKS)
		print("//!HOOK", HOOKS[i])
}

function basename(s) {
	gsub(".*/", "", s)
	return s
}

function extremes_preserve(scale) {
	hooks()
	printf("%s\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n",
		"//!DESC Non-local means (downscale)",
		"//!WIDTH LUMA.w " scale " /",
		"//!HEIGHT LUMA.h " scale " /",
		"//!BIND LUMA",
		"//!SAVE EP",
		"vec4 hook()",
		"{",
		"	return LUMA_texOff(0);",
		"}")
	ALL_TEX = ALL_TEX ? (ALL_TEX ":" "EP") : "EP"
	EP_BOUND = 1
}

function robust_filter(name, scale) {
	prefixed_name = "PRE" name
	if (scale ~ /^SHARE_/) {
		sub("SHARE_", "", scale)
		hooks()
		printf("%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n",
			"//!DESC Non-local means (share)",
			"//!BIND " scale,
			"//!SAVE " name,
			"vec4 hook()",
			"{",
			"	return " scale "_texOff(0);",
			"}")
	} else if (scale !~ /^[0-9][.]?[0-9]*$/) {
		shader = scale
		cmd = "./inject_shader -v OUT_TEX=" name " -v HOOKS=" HOOKS_

		GUIDED_OPTS = ""
		for (i in opts) {
			split(opts[i], var_val, "=")
			unprefixed_key = var_val[1]
			sub(".*_", "", unprefixed_key)
			if (var_val[1] ~ /^GUIDED_/)
				GUIDED_OPTS = GUIDED_OPTS ? (GUIDED_OPTS ":" unprefixed_key "=" var_val[2]) : (unprefixed_key "=" var_val[2])
		}

		if (shader ~ /guided/ && GUIDED_OPTS)
			cmd = "env GUIDED_OPTS=" GUIDED_OPTS " ./guided_cfg < " shader " | " cmd
		else
			cmd = cmd " < " shader

		print("// The following is shader code injected from", basename(shader))
		system(cmd)
		print("// End of source code injected from", basename(shader))
	} else {
		hooks()
		printf("%s\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n",
			"//!DESC Non-local means (downscale)",
			"//!BIND HOOKED",
			"//!SAVE " prefixed_name,
			"//!WIDTH HOOKED.w " scale " /",
			"//!HEIGHT HOOKED.h " scale " /",
			"vec4 hook()",
			"{",
			"	return HOOKED_texOff(0);",
			"}")
		hooks()
		printf("%s\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n",
			"//!DESC Non-local means (unscale)",
			"//!BIND " prefixed_name,
			"//!SAVE " name,
			"//!WIDTH " (WIDTH ? WIDTH : "HOOKED.w"),
			"//!HEIGHT " (HEIGHT ? HEIGHT : "HOOKED.h"),
			"vec4 hook()",
			"{",
			"	return " prefixed_name "_texOff(0);",
			"}")
	}
	
	ALL_TEX = ALL_TEX ? (ALL_TEX ":" name) : name
}

BEGIN {
	HOOKS_ = "LUMA,CHROMA"

	split(ENVIRON["NLM_OPTS"], opts, ":")
	for (i in opts) {
		split(opts[i], var_val, "=")
		if (var_val[1] == "HOOKS")
			HOOKS_ = var_val[2]
		else if (var_val[1] == "T_FRAME_LIMIT")
			T_FRAME_LIMIT = var_val[2]
		else if (var_val[1] == "T_RES_W")
			T_RES_W = var_val[2]
		else if (var_val[1] == "T_RES_H")
			T_RES_H = var_val[2]
		else if (var_val[1] == "WIDTH")
			WIDTH = var_val[2]
		else if (var_val[1] == "HEIGHT")
			HEIGHT = var_val[2]
	}

	split(HOOKS_, HOOKS, ",")
}

/\/\/cfg_desc/ { print("// Profile description:", ENVIRON["NLM_DESC"]); next; }

# Shader stages preceding NLM
/\/\/cfg_pre/ {
	split("LUMA CHROMA", planes)
	for (p in planes) {
		# sets defaults for RF/EP, should be the same as nlmeans_template
		# XXX read defaults from elsewhere?
		RF = (planes[p] == "LUMA") ? "../guided.glsl" : "SHARE_RF_LUMA"
		EP = (planes[p] == "LUMA") ? 3.0 : 0

		RF_parsed = EP_parsed = 0 # prevent parsing opts multiple times
		split(ENVIRON["NLM_" planes[p]], opts, ":")
		for (i in opts) {
			split(opts[i], var_val, "=")
			if (!RF_parsed && var_val[1] == "RF") {
				RF = var_val[2]
				RF_parsed = 1
			} else if (!EP_parsed && var_val[1] == "EP") {
				EP = var_val[2]
				EP_parsed = 1
			}
		}

		tex_suffix = (planes[p] == "LUMA") ? "_LUMA" : ""
		if (RF)
			robust_filter("RF" tex_suffix, RF)

		if (EP && !EP_BOUND)
			extremes_preserve(EP)
	}

	next
}

# NLM HOOK block
/\/\/cfg_hook/ {
	hooks()

	print("//!BIND HOOKED")
	split(ALL_TEX, ALL_TEX_ARR, ":")
	for (i in ALL_TEX_ARR)
		print("//!BIND", ALL_TEX_ARR[i])

	for (i = 1; i <= T_FRAME_LIMIT; i++)
		print("//!BIND PREV" i)

	printf("//!DESC Non-local means (%s)\n", basename(ENVIRON["NLM_FILE"]))

	if (WIDTH)
		print("//!WIDTH", WIDTH)
	if (HEIGHT)
		print("//!HEIGHT", HEIGHT)

	next
}

/^#ifdef LUMA_raw$/           { opt_plane = "LUMA" }
/^#el/ && opt_plane == "LUMA" { opt_plane = "CHROMA" }
/^#define/ {
	split(ENVIRON["NLM_" opt_plane], opts, ":")
	for (i in opts) {
		split(opts[i], var_val, "=")
		if ($2 == var_val[1]) {
			if ($2 ~ /^(RF|EP)$/)
				print("#define", var_val[1], (var_val[2] != 0))
			else
				print("#define", var_val[1], var_val[2])
			next
		}
	}
}

/\/\/cfg_T_load/ {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("\tcase %d: return imageLoad(PREV%d, ivec2((HOOKED_pos + HOOKED_pt * vec2(off)) * imageSize(PREV%d)));\n", i, i, i)
	next
}

/\/\/cfg_T_store/ {
	for (i = T_FRAME_LIMIT; i > 0; i--)
		printf("\timageStore(PREV%d, ivec2(HOOKED_pos*imageSize(PREV%d)), load2(vec3(0,0,%d)));\n", i, i, i-1)
	next
}

{ print($0) }

END {
	for (i = 1; i <= T_FRAME_LIMIT; i++)
		printf("//!TEXTURE PREV%d\n//!SIZE %d %d\n//!FORMAT r32f\n//!STORAGE\n\n", i, T_RES_W, T_RES_H)
}

