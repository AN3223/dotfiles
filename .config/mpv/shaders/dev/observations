#!/bin/sh -e
### Here are some observations about the data gathered from shader_test. 
### Think of this kinda like a jupyter notebook. The format goes:
#
### Comment
#code
# OUTPUT:
# the code's output

### XXX testing is new and incomplete, take everything with a grain of salt

### XXX retest w/o EP (maybe make this default)
### XXX test SW
### XXX test on different noise levels
### XXX test on a wide variety of test images
### XXX test HQ (including PSS)
### XXX test LQ
### XXX test temporal (including ME)
### XXX organize tests into subdirectories?

### Optimal guided filter (luma)
#
### Surprisingly, MEANI < 1 is actually better in some cases
#
### MEANI really likes multiples of 0.25, (the maximizer gets stuck in a 
### loop if it starts searching slightly higher/lower than 1.5)
#
#fn="guided:images:LUMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=MEANI:1.5:2:3e-3:10:E=0.001,0.0025,0.005,0.0075,0.01:PREI=1,1.125...1.5:I=1,2,3,4.stats.bz2"
#bzcat "stats/$fn" | grep BASELINE
#
# OUTPUT:
# BASELINE=NOISE=10:10 0.819476491
#
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# MEANI=1.5:E=0.001:PREI=1:I=1 0.891042782
# MEANI=0.75:E=0.0025:PREI=1.5:I=1 0.891849873
# MEANI=1.5:E=0.0025:PREI=1.375:I=1 0.892759109
# MEANI=1.5:E=0.0025:PREI=1.25:I=1 0.893501418
# MEANI=1.5:E=0.0025:PREI=1.125:I=1 0.894048255
# MEANI=1.5:E=0.0025:PREI=1:I=1 0.89437764
# MEANI=1.5:E=0.001:PREI=1.5:I=1 0.895546582
# MEANI=1.5:E=0.001:PREI=1.125:I=1 0.89563142
# MEANI=1.5:E=0.001:PREI=1.375:I=1 0.8957968
# MEANI=1.5:E=0.001:PREI=1.25:I=1 0.895904055
#
#bzcat "stats/$fn" | grep -F :I=2 | sort -k 2 -n | tail
#
# OUTPUT:
# MEANI=0.375:E=0.0025:PREI=1.5:I=2 0.870801945
# MEANI=0.375:E=0.0025:PREI=1.375:I=2 0.87102095
# MEANI=0.375:E=0.0025:PREI=1.25:I=2 0.87133773
# MEANI=0.5625:E=0.0025:PREI=1.125:I=2 0.871566055
# MEANI=0.75:E=0.0025:PREI=1:I=2 0.87180127
# MEANI=0.75:E=0.001:PREI=1.5:I=2 0.888474818
# MEANI=0.75:E=0.001:PREI=1.375:I=2 0.8887018
# MEANI=0.75:E=0.001:PREI=1:I=2 0.889102927
# MEANI=0.75:E=0.001:PREI=1.25:I=2 0.88914895
# MEANI=0.75:E=0.001:PREI=1.125:I=2 0.889274491
#
#bzcat "stats/$fn" | grep -F :I=3 | sort -k 2 -n | tail
#
# OUTPUT:
# MEANI=1.5:E=0.0025:PREI=1.5:I=3 0.840087891
# MEANI=1.5:E=0.0025:PREI=1.375:I=3 0.8514126
# MEANI=1.5:E=0.0025:PREI=1.25:I=3 0.853154218
# MEANI=1.5:E=0.0025:PREI=1.125:I=3 0.855044255
# MEANI=1.5:E=0.0025:PREI=1:I=3 0.862426836
# MEANI=1.5:E=0.001:PREI=1.5:I=3 0.8639341
# MEANI=1.5:E=0.001:PREI=1.375:I=3 0.872605891
# MEANI=1.5:E=0.001:PREI=1.25:I=3 0.8738773
# MEANI=1.5:E=0.001:PREI=1.125:I=3 0.875325582
# MEANI=1.5:E=0.001:PREI=1:I=3 0.878092582
#
#bzcat "stats/$fn" | grep -F :I=4 | sort -k 2 -n | tail
#
# OUTPUT:
# MEANI=1.5:E=0.0025:PREI=1.5:I=4 0.8435852
# MEANI=1.5:E=0.0025:PREI=1.375:I=4 0.844330055
# MEANI=1.5:E=0.0025:PREI=1.25:I=4 0.844942291
# MEANI=1.5:E=0.0025:PREI=1.125:I=4 0.845373491
# MEANI=1.5:E=0.0025:PREI=1:I=4 0.84602633
# MEANI=1.5:E=0.001:PREI=1.5:I=4 0.870876564
# MEANI=1.5:E=0.001:PREI=1.375:I=4 0.871276436
# MEANI=1.5:E=0.001:PREI=1.25:I=4 0.8717232
# MEANI=1.5:E=0.001:PREI=1.125:I=4 0.87195318
# MEANI=1.5:E=0.001:PREI=1:I=4 0.872120982
#
### A small amount of PREI subsampling does indeed improve quality
#
#bzcat "stats/$fn" | sort -k 2 -n | tail -n 3
#
# OUTPUT:
# MEANI=1.5:E=0.001:PREI=1.125:I=1 0.89563142
# MEANI=1.5:E=0.001:PREI=1.375:I=1 0.8957968
# MEANI=1.5:E=0.001:PREI=1.25:I=1 0.895904055
#
#bzcat "stats/$fn" | grep -F :PREI=1: | sort -k 2 -n | tail -n 3
#
# OUTPUT:
# MEANI=0.75:E=0.005:PREI=1:I=1 0.890238818
# MEANI=1.5:E=0.001:PREI=1:I=1 0.891042782
# MEANI=1.5:E=0.0025:PREI=1:I=1 0.89437764
#

### Optimal guided filter (chroma)
#
#fn="guided:images:CHROMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=MEANI:1.5:2:1e-5:10:PREI=1,1.125,1.5:I=1,2,3,4,6,8,10.stats.bz2"
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT: 
# MEANI=1.5:PREI=1.125:I=1 0.926061927
# MEANI=0.75:PREI=1.125:I=6 0.9263562818
# MEANI=0.75:PREI=1:I=6 0.926401109
# MEANI=1.5:PREI=1.5:I=1 0.930031873
# MEANI=0.75:PREI=1.5:I=4 0.9324472818
# MEANI=0.75:PREI=1.125:I=4 0.932685127
# MEANI=0.75:PREI=1:I=4 0.93270709
# MEANI=0.9375:PREI=1:I=2 0.9421686636
# MEANI=0.9375:PREI=1.125:I=2 0.942651127
# MEANI=0.9375:PREI=1.5:I=2 0.943026745
#

### Optimal guided filter (anime, chroma)
#
#fn="guided:anime:CHROMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=MEANI:1.5:2:3e-3:10:E=0.001,0.0025,0.005,0.0075,0.01:PREI=1,1.125:I=1,2,3,4,6,8,10.stats.bz2"
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# MEANI=0.75:E=0.01:PREI=1.125:I=2 0.954283159
# MEANI=0.75:E=0.01:PREI=1:I=2 0.954322068
# MEANI=0.75:E=0.0075:PREI=1.125:I=2 0.954745977
# MEANI=0.75:E=0.0075:PREI=1:I=2 0.9547795
# MEANI=0.75:E=0.005:PREI=1.125:I=2 0.95543764
# MEANI=0.75:E=0.005:PREI=1:I=2 0.9554467
# MEANI=1.5:E=0.001:PREI=1:I=2 0.955923773
# MEANI=1.5:E=0.001:PREI=1.125:I=2 0.95689466
# MEANI=1.5:E=0.0025:PREI=1:I=2 0.957237659
# MEANI=1.5:E=0.0025:PREI=1.125:I=2 0.957292341
#

### Upscaling
#
### shader_test works for testing upscalers
#
#fn='FSRCNNX_x2_8-0-4-1:images:LUMA:SCALE=540:540:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# BASELINE=SCALE=540:540 0.927599
# NO_CFGOPTS 0.9498638
#
### Bicubic is scale's default
#
#fn='FSRCNNX_x2_8-0-4-1:images:LUMA:SCALE=540:540:flags=bicubic:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# BASELINE=SCALE=540:540:flags=bicubic 0.927599
# NO_CFGOPTS 0.9498638
#
### Lanczos is better
#
#fn='FSRCNNX_x2_8-0-4-1:images:LUMA:SCALE=540:540:flags=lanczos:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# BASELINE=SCALE=540:540:flags=lanczos 0.9326444
# NO_CFGOPTS 0.9505084
#
### nlmeans_2x is worse than baseline lol
#
#fn='NLM_2x:images:LUMA:SCALE=540:540:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# NO_CFGOPTS 0.9022264
# BASELINE=SCALE=540:540 0.927599
#

### Reverse chroma subsampling
#
### Nothing seems to perform very well
#
#fn='KrigBilateral:images:CHROMA:FORMAT=yuv420p:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# NO_CFGOPTS 0.9862585
# BASELINE=FORMAT=yuv420p 0.9867304
#
#fn='NLM_lgc:images:CHROMA:FORMAT=yuv420p:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# NO_CFGOPTS 0.9861952
# BASELINE=FORMAT=yuv420p 0.9867304
#
### Guided LGC scored much lower
#
#fn='guided_lgc:images:CHROMA:FORMAT=yuv420p:1080x1080:yuv444p:CAT=1:MAX=:10:1.25:1e-6:Inf:.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n
#
# OUTPUT:
# NO_CFGOPTS 0.9731073
# BASELINE=FORMAT=yuv420p 0.9867304
#

### NLM's EP option doesn't perform well on SSIM, not a surprise:
#
#fn='NLM:images:LUMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:5:1.25:1e-6:Inf:EP=0,1.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# BASELINE=NOISE=10:10 0.819476491
# S=5.533854:EP=1 0.893021327
# S=4:EP=0 0.897298291
#
### Adjusting DP/BP doesn't seem to help
#
#fn='NLM:images:LUMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:5:1.25:1e-6:Inf:DP=0.0,0.5...3.0:BP=0.0,0.5...3.0.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# S=4.5:DP=0:BP=3 0.889693291
# S=7.8125:DP=0.5:BP=1 0.88986745
# S=4.375:DP=0:BP=2.5 0.890410055
# S=4.5:DP=0:BP=2 0.891274636
# S=6.510417:DP=0.5:BP=0.5 0.891562055
# S=4.4:DP=0:BP=1.5 0.89235113
# S=5.25:DP=0.5:BP=0 0.893091036
# S=4.4:DP=0:BP=1 0.893733582
# S=4.2:DP=0:BP=0.5 0.895552418
# S=4:DP=0:BP=0 0.897298291
#

### The optimal standalone guided filter is also optimal for injecting into NLM:
#
#fn='NLM:images:LUMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:5:1.25:1e-6:Inf:GUIDED_E=0.001,0.0025,0.005,0.0075,0.01:GUIDED_MEANI=1.375,1.5,1.625:GUIDED_PREI=1.125,1.25,1.5,1.75:EP=0.stats.bz2'
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# S=3.04:GUIDED_E=0.0025:GUIDED_MEANI=1.5:GUIDED_PREI=1.125:EP=0 0.896795145
# S=4.75:GUIDED_E=0.001:GUIDED_MEANI=1.375:GUIDED_PREI=1.125:EP=0 0.896862873
# S=4.5:GUIDED_E=0.001:GUIDED_MEANI=1.375:GUIDED_PREI=1.25:EP=0 0.896891855
# S=3.8:GUIDED_E=0.001:GUIDED_MEANI=1.625:GUIDED_PREI=1.5:EP=0 0.897049036
# S=3.666667:GUIDED_E=0.001:GUIDED_MEANI=1.5:GUIDED_PREI=1.75:EP=0 0.89707505
# S=4.4:GUIDED_E=0.001:GUIDED_MEANI=1.625:GUIDED_PREI=1.125:EP=0 0.897140491
# S=4.2:GUIDED_E=0.001:GUIDED_MEANI=1.625:GUIDED_PREI=1.25:EP=0 0.897172836
# S=4:GUIDED_E=0.001:GUIDED_MEANI=1.5:GUIDED_PREI=1.5:EP=0 0.89724473
# S=4.583333:GUIDED_E=0.001:GUIDED_MEANI=1.5:GUIDED_PREI=1.125:EP=0 0.897384418
# S=4.4:GUIDED_E=0.001:GUIDED_MEANI=1.5:GUIDED_PREI=1.25:EP=0 0.8974382
#

### XXX retest
### NLM guided by fast guided filter seems to work very well for anime
#
#fn="NLM:mountain_adventurer:LUMA:NOISE=10:RZ=10:CAT=1:S=3.5,5,6.25:RF='.._guided.glsl':GUIDED_MEANI=1.375,1.5,1.625:GUIDED_E=0.0009,0.0010...0.0015:GUIDED_PREI=1.25,1.5...2.0:GUIDED_I=1,2,3,4.stats.bz2"
#bzcat "stats/$fn" | sort -k 3 -n | tail
#
# OUTPUT:
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0012:GUIDED_PREI=2:GUIDED_I=2 Y 0.9289317 U 0.8519957 V 0.8507858 All 0.9030847
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0013:GUIDED_PREI=2:GUIDED_I=2 Y 0.9289331 U 0.8519958 V 0.8507859 All 0.9030857
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0013:GUIDED_PREI=1.25:GUIDED_I=2 Y 0.9289519 U 0.8519961 V 0.8507862 All 0.9030984
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0012:GUIDED_PREI=1.5:GUIDED_I=2 Y 0.9289568 U 0.8519959 V 0.8507862 All 0.9031017
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.001:GUIDED_PREI=1.25:GUIDED_I=2 Y 0.9289623 U 0.851995 V 0.850786 All 0.9031051
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0009:GUIDED_PREI=1.5:GUIDED_I=2 Y 0.928966 U 0.8519978 V 0.8507864 All 0.9031082
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0012:GUIDED_PREI=1.25:GUIDED_I=2 Y 0.9289784 U 0.8519951 V 0.8507861 All 0.9031158
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0011:GUIDED_PREI=1.25:GUIDED_I=2 Y 0.9289878 U 0.8519961 V 0.8507862 All 0.9031222
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.0011:GUIDED_PREI=1.5:GUIDED_I=2 Y 0.92899 U 0.8519956 V 0.8507863 All 0.9031238
# S=3.5:RF=../guided.glsl:GUIDED_MEANI=1.5:GUIDED_E=0.001:GUIDED_PREI=1.5:GUIDED_I=2 Y 0.9289957 U 0.8519934 V 0.8507864 All 0.903127
#
### Non-fast guided filter seems to work best when standalone though
#
### Also worth noting that this is outperforming NLM
#
#fn="guided:mountain_adventurer:LUMA:NOISE=10:RZ=10:CAT=1:MEANI=1.375,1.5,1.625:E=0.0009,0.0010...0.0015:PREI=1.25,1.5...2.0:I=1,2,3,4.stats.bz2"
#bzcat "stats/$fn" | sort -k 3 -n | tail
#
# OUTPUT:
# MEANI=1.5:E=0.0011:PREI=1.5:I=1 Y 0.9285681 U 0.8519953 V 0.8507861 All 0.9028422
# MEANI=1.5:E=0.0015:PREI=1.25:I=1 Y 0.9286878 U 0.8519974 V 0.8507859 All 0.9029224
# MEANI=1.5:E=0.001:PREI=1.5:I=1 Y 0.9288154 U 0.8519965 V 0.8507858 All 0.9030073
# MEANI=1.5:E=0.0009:PREI=1.5:I=1 Y 0.9288872 U 0.8519971 V 0.8507863 All 0.9030555
# MEANI=1.5:E=0.0014:PREI=1.25:I=1 Y 0.9290727 U 0.8519984 V 0.850786 All 0.9031791
# MEANI=1.5:E=0.0013:PREI=1.25:I=1 Y 0.9293994 U 0.8519985 V 0.850786 All 0.9033971
# MEANI=1.5:E=0.0009:PREI=1.25:I=1 Y 0.9294709 U 0.8519987 V 0.8507864 All 0.903445
# MEANI=1.5:E=0.0012:PREI=1.25:I=1 Y 0.9296498 U 0.8519976 V 0.8507861 All 0.903564
# MEANI=1.5:E=0.001:PREI=1.25:I=1 Y 0.929748 U 0.852 V 0.8507863 All 0.9036297
# MEANI=1.5:E=0.0011:PREI=1.25:I=1 Y 0.929784 U 0.8519984 V 0.850786 All 0.9036534
#

### Optimal guided filter for injection into NLM (chroma)
#
### Fast guided filter works very well on chroma
#
#fn1="NLM:images:CHROMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:20:1.25:1e-6:10:GUIDED_MEANI=0.375,0.5,0.75,1.5,2,2.5:GUIDED_PREI=1.0,1.125,1.5:GUIDED_I=1,2,3,4:EP=0.stats.bz2"
#fn2="NLM:images:CHROMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:20:1.25:1e-5:10:GUIDED_MEANI=0.5,0.75,1.5,2,2.5:GUIDED_PREI=1.0,1.125:GUIDED_I=1,2,3,4,6,8,10:EP=0.stats.bz2"
#bzcat "stats/$fn1" "stats/$fn2" | sort -k 2 -n | tail
#
# OUTPUT:
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=2:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=2:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=3:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=3:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=4:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=6:EP=0 0.9264365182
# S=25:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=8:EP=0 0.9264365182
# S=26.5625:GUIDED_MEANI=0.5:GUIDED_PREI=1:GUIDED_I=3:EP=0 0.9453415
# S=21.875:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=4:EP=0 0.945377
# S=26.5625:GUIDED_MEANI=0.75:GUIDED_PREI=1:GUIDED_I=4:EP=0 0.946673956
#

### Optimal guided filter for injection into NLM (chroma, anime)
#
### The I variable doesn't seem to matter as much
### MEANI < 1 doesn't seem to do well here
#
#fn="NLM:anime:CHROMA:NOISE=10:10:1080x1080:yuv444p:CAT=1:MAX=S:20:1.25:1e-5:10:GUIDED_MEANI=0.5,0.75,1.5,2,2.5:GUIDED_PREI=1.0,1.125:GUIDED_I=1,2,3,4,6,8,10:EP=0.stats.bz2"
#bzcat "stats/$fn" | sort -k 2 -n | tail
#
# OUTPUT:
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1.125:GUIDED_I=4:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1.125:GUIDED_I=6:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1.125:GUIDED_I=8:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=10:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=1:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=2:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=3:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=4:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=6:EP=0 0.9360216
# S=22:GUIDED_MEANI=2:GUIDED_PREI=1:GUIDED_I=8:EP=0 0.9360216
#

### XXX retest everything below this point

### Guided LGC seems to slightly benefit from high E
#
### Guided LGC never quite outperforms non-LGC guided
#
### Note: PREI isn't relevant here, LGC does not accept the parameter, 
### I tested it on accident
#
#fn="guided:vibrant_embroidery:CHROMA:NOISE=10:RZ=10:CAT=1:MEANI=1.875,1.9375,2:E=9:PREI=129_128,65_64...1.25:I='SHARE_LUMA'.stats.bz2"
#bzcat "stats/$fn" | sort -k 9 -n | tail
#
# OUTPUT:
# MEANI=2:E=9:PREI=1.140625:I=SHARE_LUMA Y 0.8676776 U 0.9499157 V 0.9507854 All 0.8952351
# MEANI=2:E=9:PREI=1.1875:I=SHARE_LUMA Y 0.8676777 U 0.9498078 V 0.9508956 All 0.8952356
# MEANI=2:E=9:PREI=1.179688:I=SHARE_LUMA Y 0.8676776 U 0.9498675 V 0.950874 All 0.895242
# MEANI=2:E=9:PREI=1.101563:I=SHARE_LUMA Y 0.8676777 U 0.9495778 V 0.951165 All 0.8952422
# MEANI=2:E=9:PREI=1.125:I=SHARE_LUMA Y 0.8676777 U 0.9495181 V 0.95125 All 0.8952464
# MEANI=2:E=9:PREI=1.109375:I=SHARE_LUMA Y 0.8676777 U 0.9495844 V 0.9512042 All 0.89525
# MEANI=2:E=9:PREI=1.054688:I=SHARE_LUMA Y 0.8676777 U 0.9497355 V 0.95111 All 0.8952593
# MEANI=2:E=9:PREI=1.0625:I=SHARE_LUMA Y 0.8676777 U 0.9497836 V 0.9511325 All 0.895271
# MEANI=2:E=9:PREI=1.078125:I=SHARE_LUMA Y 0.8676777 U 0.9497595 V 0.9512098 All 0.89528
# MEANI=2:E=9:PREI=1.046875:I=SHARE_LUMA Y 0.8676776 U 0.949885 V 0.9511137 All 0.8952849
#
#fn="guided:mountain_adventurer:CHROMA:NOISE=10:RZ=10:CAT=1:MEANI=1.875,2,2.125:E=8,9,10:PREI=2.25:I='SHARE_LUMA'.stats.bz2"
#bzcat "stats/$fn" | sort -k 9 -n | tail
#
# OUTPUT: 
# BASELINE=NOISE=10 Y 0.830653 U 0.699357 V 0.6967635 All 0.7864555
# MEANI=2.125:E=10:PREI=2.25:I=SHARE_LUMA Y 0.8305817 U 0.9632354 V 0.9614184 All 0.8744967
# MEANI=2.125:E=9:PREI=2.25:I=SHARE_LUMA Y 0.8305817 U 0.9632353 V 0.9614184 All 0.8744967
# MEANI=2.125:E=8:PREI=2.25:I=SHARE_LUMA Y 0.8305817 U 0.9632358 V 0.9614184 All 0.8744969
# MEANI=1.875:E=8:PREI=2.25:I=SHARE_LUMA Y 0.8305818 U 0.9647062 V 0.9629304 All 0.874994
# MEANI=1.875:E=9:PREI=2.25:I=SHARE_LUMA Y 0.8305818 U 0.9647071 V 0.9629304 All 0.874994
# MEANI=1.875:E=10:PREI=2.25:I=SHARE_LUMA Y 0.8305818 U 0.9647064 V 0.9629304 All 0.8749941
# MEANI=2:E=8:PREI=2.25:I=SHARE_LUMA Y 0.8305822 U 0.9728378 V 0.9710634 All 0.8777049
# MEANI=2:E=9:PREI=2.25:I=SHARE_LUMA Y 0.8305822 U 0.9728387 V 0.9710634 All 0.877705
# MEANI=2:E=10:PREI=2.25:I=SHARE_LUMA Y 0.8305822 U 0.9728394 V 0.9710635 All 0.8777051
#
### XXX test NLM LGC



